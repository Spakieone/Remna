#!/usr/bin/env bash
# Caddy for Reality Selfsteal Installation Script
# This script installs and manages Caddy for Reality traffic masking
# VERSION=2.1.4

# Handle @ prefix for consistency with other scripts
if [ $# -gt 0 ] && [ "$1" = "@" ]; then
    shift  
fi

set -e
SCRIPT_VERSION="2.1.4"
GITHUB_REPO="Spakieone/Remna"
UPDATE_URL="https://raw.githubusercontent.com/$GITHUB_REPO/main/selfsteal.sh"
SCRIPT_URL="$UPDATE_URL"  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
CONTAINER_NAME="caddy-selfsteal"
VOLUME_PREFIX="caddy"
CADDY_VERSION="2.9.1"

# Configuration
APP_NAME="selfsteal"
APP_DIR="/opt/caddy"
CADDY_CONFIG_DIR="$APP_DIR"
HTML_DIR="/opt/caddy/html"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color


# Parse command line arguments
COMMAND=""
if [ $# -gt 0 ]; then
    case "$1" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version|-v)
            echo "–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Caddy Selfsteal v$SCRIPT_VERSION"
            exit 0
            ;;
        *)
            COMMAND="$1"
            ;;
    esac
fi
# Fetch IP address
NODE_IP=$(curl -s -4 ifconfig.io 2>/dev/null || echo "127.0.0.1")
if [ -z "$NODE_IP" ] || [ "$NODE_IP" = "" ]; then
    NODE_IP="127.0.0.1"
fi

# Check if running as root
check_running_as_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo)${NC}"
        exit 1
    fi
}

# Check system requirements
check_system_requirements() {
    echo -e "${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 40))${NC}"
    echo

    local requirements_met=true

    # Check Docker
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${GRAY}   –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker${NC}"
        requirements_met=false
    else
        local docker_version=$(docker --version | cut -d' ' -f3 | tr -d ',')
        echo -e "${GREEN}‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $docker_version${NC}"
    fi

    # Check Docker Compose
    if ! docker compose version >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker Compose V2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        requirements_met=false
    else
        local compose_version=$(docker compose version --short 2>/dev/null || echo "unknown")
        echo -e "${GREEN}‚úÖ Docker Compose V2: $compose_version${NC}"
    fi

    # Check curl
    if ! command -v curl >/dev/null 2>&1; then
        echo -e "${RED}‚ùå curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        requirements_met=false
    else
        echo -e "${GREEN}‚úÖ curl –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi

    # Check for existing Caddy installation
    if systemctl is-active --quiet caddy 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π Caddy${NC}"
        local caddy_domain=""
        if [ -f "/etc/caddy/Caddyfile" ]; then
            caddy_domain=$(grep -E '^[a-zA-Z0-9.-]+\s*{' /etc/caddy/Caddyfile | head -1 | awk '{print $1}' | sed 's/{$//')
        fi
        if [ -n "$caddy_domain" ]; then
            echo -e "${GRAY}   –î–æ–º–µ–Ω: $caddy_domain${NC}"
        fi
        echo -e "${GRAY}   PID: $(systemctl show -p MainPID --value caddy 2>/dev/null || echo 'unknown')${NC}"
        echo
        echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤!${NC}"
        echo -e "${GRAY}   –°–∏—Å—Ç–µ–º–Ω—ã–π Caddy –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å Caddy Selfsteal${NC}"
        echo
        echo -e "${WHITE}üîß –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:${NC}"
        echo -e "   ${WHITE}1)${NC} ${GRAY}–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π Caddy${NC}"
        echo -e "   ${WHITE}2)${NC} ${GRAY}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)${NC}"
        echo -e "   ${WHITE}3)${NC} ${GRAY}–û—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É${NC}"
        echo
        
        while true; do
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-3]: " caddy_choice
            case "$caddy_choice" in
                1)
                    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ Caddy...${NC}"
                    systemctl stop caddy 2>/dev/null || true
                    systemctl disable caddy 2>/dev/null || true
                    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π Caddy –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–∫–ª—é—á—ë–Ω${NC}"
                    echo
                    break
                    ;;
                2)
                    echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö${NC}"
                    echo
                    break
                    ;;
                3)
                    echo -e "${GRAY}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
                    return 1
                    ;;
                *)
                    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3${NC}"
                    ;;
            esac
        done
    fi

    # Check available disk space
    local available_space=$(df / | tail -1 | awk '{print $4}')
    local available_gb=$((available_space / 1024 / 1024))
    
    if [ $available_gb -lt 1 ]; then
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: –¥–æ—Å—Ç—É–ø–Ω–æ ${available_gb}GB${NC}"
        requirements_met=false
    else
        echo -e "${GREEN}‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: –¥–æ—Å—Ç—É–ø–Ω–æ ${available_gb}GB${NC}"
    fi

    echo

    if [ "$requirements_met" = false ]; then
        echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!${NC}"
        return 1
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!${NC}"
        return 0
    fi
}


validate_domain_dns() {
    local domain="$1"
    local server_ip="$2"
    
    echo -e "${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 40))${NC}"
    echo
    
    # Check if domain format is valid
    if ! [[ "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞!${NC}"
        echo -e "${GRAY}   –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: subdomain.domain.com${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üìù –î–æ–º–µ–Ω:${NC} $domain"
    echo -e "${WHITE}üñ•Ô∏è  IP —Å–µ—Ä–≤–µ—Ä–∞:${NC} $server_ip"
    echo
    
    # Check if dig is available
    if ! command -v dig >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç—ã dig...${NC}"
        if command -v apt-get >/dev/null 2>&1; then
            apt-get update >/dev/null 2>&1
            apt-get install -y dnsutils >/dev/null 2>&1
        elif command -v yum >/dev/null 2>&1; then
            yum install -y bind-utils >/dev/null 2>&1
        elif command -v dnf >/dev/null 2>&1; then
            dnf install -y bind-utils >/dev/null 2>&1
        else
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É dig –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏${NC}"
            echo -e "${GRAY}   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: apt install dnsutils${NC}"
            return 1
        fi
        
        if ! command -v dig >/dev/null 2>&1; then
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É dig${NC}"
            return 1
        fi
        echo -e "${GREEN}‚úÖ –£—Ç–∏–ª–∏—Ç–∞ dig —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
        echo
    fi
    
    # Perform DNS lookups
    echo -e "${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π:${NC}"
    echo
    
    # A record check
    echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ A –∑–∞–ø–∏—Å–∏...${NC}"
    local a_records=$(dig +short A "$domain" 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    
    if [ -z "$a_records" ]; then
        echo -e "${RED}   ‚ùå A-–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        local dns_status="failed"
    else
        echo -e "${GREEN}   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ A-–∑–∞–ø–∏—Å—å:${NC}"
        while IFS= read -r ip; do
            echo -e "${GRAY}      ‚Üí $ip${NC}"
            if [ "$ip" = "$server_ip" ]; then
                local dns_match="true"
            fi
        done <<< "$a_records"
    fi
    
    # AAAA record check (IPv6)
    echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ AAAA-–∑–∞–ø–∏—Å–∏...${NC}"
    local aaaa_records=$(dig +short AAAA "$domain" 2>/dev/null)
    
    if [ -z "$aaaa_records" ]; then
        echo -e "${GRAY}   ‚ÑπÔ∏è  AAAA-–∑–∞–ø–∏—Å—å (IPv6) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    else
        echo -e "${GREEN}   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ AAAA-–∑–∞–ø–∏—Å—å:${NC}"
        while IFS= read -r ip; do
            echo -e "${GRAY}      ‚Üí $ip${NC}"
        done <<< "$aaaa_records"
    fi
    
    # CNAME record check
    echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ CNAME-–∑–∞–ø–∏—Å–∏...${NC}"
    local cname_record=$(dig +short CNAME "$domain" 2>/dev/null)
    
    if [ -n "$cname_record" ]; then
        echo -e "${GREEN}   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ CNAME-–∑–∞–ø–∏—Å—å:${NC}"
        echo -e "${GRAY}      ‚Üí $cname_record${NC}"
        
        # Check CNAME target
        echo -e "${GRAY}   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ CNAME...${NC}"
        local cname_a_records=$(dig +short A "$cname_record" 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
        
        if [ -n "$cname_a_records" ]; then
            echo -e "${GREEN}   ‚úÖ –¶–µ–ª–µ–≤–æ–π CNAME —Ä–∞–∑—Ä–µ—à—ë–Ω:${NC}"
            while IFS= read -r ip; do
                echo -e "${GRAY}      ‚Üí $ip${NC}"
                if [ "$ip" = "$server_ip" ]; then
                    local dns_match="true"
                fi
            done <<< "$cname_a_records"
        fi
    else
        echo -e "${GRAY}   ‚ÑπÔ∏è  CNAME-–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
    
    echo
    
    # DNS propagation check with multiple servers
    echo -e "${WHITE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS:${NC}"
    echo
    
    local dns_servers=("8.8.8.8" "1.1.1.1" "208.67.222.222" "9.9.9.9")
    local propagation_count=0
    
    for dns_server in "${dns_servers[@]}"; do
        echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ $dns_server...${NC}"
        local remote_a=$(dig @"$dns_server" +short A "$domain" 2>/dev/null | head -1)
        
        if [ -n "$remote_a" ] && [[ "$remote_a" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            if [ "$remote_a" = "$server_ip" ]; then
                echo -e "${GREEN}   ‚úÖ $remote_a (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º)${NC}"
                ((propagation_count++))
            else
                echo -e "${YELLOW}   ‚ö†Ô∏è  $remote_a (–¥—Ä—É–≥–æ–π IP)${NC}"
            fi
        else
            echo -e "${RED}   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞${NC}"
        fi
    done
    
    echo
    
    # Port availability check (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–ª—è Reality)
    echo -e "${WHITE}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤:${NC}"
    echo
    
    # Check if port 443 is free (should be free for Xray)
    echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 443...${NC}"
    if ss -tlnp | grep -q ":443 "; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  –ü–æ—Ä—Ç 443 –∑–∞–Ω—è—Ç${NC}"
        echo -e "${GRAY}      –≠—Ç–æ—Ç –ø–æ—Ä—Ç –Ω—É–∂–µ–Ω –¥–ª—è Xray Reality${NC}"
        local port_info=$(ss -tlnp | grep ":443 " | head -1 | awk '{print $1, $4}')
        echo -e "${GRAY}      –¢–µ–∫—É—â–∏–π: $port_info${NC}"
    else
        echo -e "${GREEN}   ‚úÖ –ü–æ—Ä—Ç 443 —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è Xray${NC}"
    fi
    
    # Check if port 80 is free (will be used by Caddy)
    echo -e "${GRAY}   –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 80...${NC}"
    if ss -tlnp | grep -q ":80 "; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  –ü–æ—Ä—Ç 80 –∑–∞–Ω—è—Ç${NC}"
        echo -e "${GRAY}      –≠—Ç–æ—Ç –ø–æ—Ä—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Caddy –¥–ª—è HTTP-—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤${NC}"
        local port80_occupied=$(ss -tlnp | grep ":80 " | head -1)
        echo -e "${GRAY}      –¢–µ–∫—É—â–∏–π: $port80_occupied${NC}"
    else
        echo -e "${GREEN}   ‚úÖ –ü–æ—Ä—Ç 80 —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è Caddy${NC}"
    fi
    
    echo
    
    # Summary and recommendations
    echo -e "${WHITE}üìã –ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS:${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 35))${NC}"
    
    if [ "$dns_match" = "true" ]; then
        echo -e "${GREEN}‚úÖ –î–æ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
        echo -e "${GREEN}‚úÖ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ DNS: $propagation_count/4 —Å–µ—Ä–≤–µ—Ä–æ–≤${NC}"
        
        if [ "$propagation_count" -ge 2 ]; then
            echo -e "${GREEN}‚úÖ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ DNS –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ DNS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ${NC}"
            echo -e "${GRAY}   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏${NC}"
        fi
    else
        echo -e "${RED}‚ùå –î–æ–º–µ–Ω –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä${NC}"
        echo -e "${GRAY}   –û–∂–∏–¥–∞–µ–º—ã–π IP: $server_ip${NC}"
        
        if [ -n "$a_records" ]; then
            echo -e "${GRAY}   –¢–µ–∫—É—â–∏–µ IP: $(echo "$a_records" | tr '\n' ' ')${NC}"
        fi
    fi
    
    echo
    echo -e "${WHITE}üîß –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è Reality:${NC}"
    echo -e "${GRAY}   ‚Ä¢ –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä ‚úì${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ü–æ—Ä—Ç 443 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è Xray ‚úì${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ü–æ—Ä—Ç 80 –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Caddy –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤${NC}"
    echo -e "${GRAY}   ‚Ä¢ Caddy –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø–æ—Ä—Ç—É (9443)${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Xray Reality –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Caddy${NC}"
    
    echo
    
    # Ask user decision
    if [ "$dns_match" = "true" ] && [ "$propagation_count" -ge 2 ]; then
        echo -e "${GREEN}üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø—Ä–æ–π–¥–µ–Ω–∞! –ì–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  DNS validation has warnings.${NC}"
        echo
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ? [y/N]: " -r continue_anyway
        
        if [[ $continue_anyway =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å DNS...${NC}"
            return 0
        else
            echo -e "${GRAY}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é DNS.${NC}"
            return 1
        fi
    fi
}

# Install function
install_command() {
    check_running_as_root
    
    clear
    echo -e "${WHITE}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Caddy –¥–ª—è Reality Selfsteal${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
    echo

    # Check if already installed
    if [ -d "$APP_DIR" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Caddy —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ $APP_DIR${NC}"
        echo
        read -p "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? [y/N]: " -r confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo -e "${GRAY}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
            return 0
        fi
        echo
        echo -e "${YELLOW}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...${NC}"
        stop_services
        rm -rf "$APP_DIR"
        echo -e "${GREEN}‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞${NC}"
        echo
    fi

    # Check system requirements
    if ! check_system_requirements; then
        return 1
    fi

    # Collect configuration
    echo -e "${WHITE}üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    echo

    # Domain configuration
    echo -e "${WHITE}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞${NC}"
    echo -e "${GRAY}–î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Xray Reality (realitySettings.serverNames)${NC}"
    echo
    
    local domain=""
    local skip_dns_check=false
    
    while [ -z "$domain" ]; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, reality.example.com): " domain
        if [ -z "$domain" ]; then
            echo -e "${RED}‚ùå Domain cannot be empty!${NC}"
            continue
        fi
        
        echo
        echo -e "${WHITE}üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS:${NC}"
        echo -e "   ${WHITE}1)${NC} ${GRAY}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é DNS (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)${NC}"
        echo -e "   ${WHITE}2)${NC} ${GRAY}–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É DNS (–¥–ª—è —Ç–µ—Å—Ç–∞/—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)${NC}"
        echo
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-2]: " dns_choice
        
        case "$dns_choice" in
            1)
                echo
                if ! validate_domain_dns "$domain" "$NODE_IP"; then
                    echo
                    read -p "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω? [Y/n]: " -r try_again
                    if [[ ! $try_again =~ ^[Nn]$ ]]; then
                        domain=""
                        continue
                    else
                        return 1
                    fi
                fi
                ;;
            2)
                echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS...${NC}"
                skip_dns_check=true
                ;;
            *)
                echo -e "${RED}‚ùå Invalid option!${NC}"
                domain=""
                continue
                ;;
        esac
    done

    # Port configuration
    echo
    echo -e "${WHITE}üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞${NC}"
    echo -e "${GRAY}–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Xray Reality (realitySettings.dest)${NC}"
    echo
    
    local port="9443"
    read -p "–í–≤–µ–¥–∏—Ç–µ HTTPS-–ø–æ—Ä—Ç Caddy (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9443): " input_port
    if [ -n "$input_port" ]; then
        port="$input_port"
    fi

    # Validate port
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞!${NC}"
        return 1
    fi

    # Summary
    echo
    echo -e "${WHITE}üìã –ò—Ç–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–î–æ–º–µ–Ω:" "$domain"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "HTTPS-–ø–æ—Ä—Ç:" "$port"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" "$APP_DIR"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ü—É—Ç—å HTML:" "$HTML_DIR"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "IP —Å–µ—Ä–≤–µ—Ä–∞:" "$NODE_IP"
    
    if [ "$skip_dns_check" = true ]; then
        printf "   ${WHITE}%-20s${NC} ${YELLOW}%s${NC}\n" "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS:" "–ü–†–û–ü–£–©–ï–ù–û"
    else
        printf "   ${WHITE}%-20s${NC} ${GREEN}%s${NC}\n" "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS:" "–ü–†–û–ô–î–ï–ù–ê"
    fi
    
    echo

    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? [Y/n]: " -r confirm
    if [[ $confirm =~ ^[Nn]$ ]]; then
        echo -e "${GRAY}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
        return 0
    fi

    # Create directories
    echo
    echo -e "${WHITE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 40))${NC}"
    
    mkdir -p "$APP_DIR"
    mkdir -p "$HTML_DIR"
    mkdir -p "$APP_DIR/logs"
    
        echo -e "${GREEN}‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

    # Create .env file
    echo
    echo -e "${WHITE}‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 40))${NC}"

    cat > "$APP_DIR/.env" << EOF
# Caddy for Reality Selfsteal Configuration
# Domain Configuration
SELF_STEAL_DOMAIN=$domain
SELF_STEAL_PORT=$port

# Generated on $(date)
# Server IP: $NODE_IP
EOF

    echo -e "${GREEN}‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω${NC}"

    # Create docker-compose.yml
    cat > "$APP_DIR/docker-compose.yml" << EOF
services:
  caddy:
    image: caddy:2.9.1
    container_name: $CONTAINER_NAME
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - $HTML_DIR:/var/www/html
      - ./logs:/var/log/caddy
      - ${VOLUME_PREFIX}_data:/data
      - ${VOLUME_PREFIX}_config:/config
    env_file:
      - .env
    network_mode: "host"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  ${VOLUME_PREFIX}_data:
  ${VOLUME_PREFIX}_config:
EOF

    echo -e "${GREEN}‚úÖ –§–∞–π–ª docker-compose.yml —Å–æ–∑–¥–∞–Ω${NC}"

    # Create Caddyfile
    cat > "$APP_DIR/Caddyfile" << 'EOF'
{
    https_port {$SELF_STEAL_PORT}
    default_bind 127.0.0.1
    servers {
        listener_wrappers {
            proxy_protocol {
                allow 127.0.0.1/32
            }
            tls
        }
    }
    auto_https disable_redirects
    log {
        output file /var/log/caddy/access.log {
            roll_size 10MB
            roll_keep 5
            roll_keep_for 720h
            roll_compression gzip
        }
        level ERROR
        format json 
    }
}

http://{$SELF_STEAL_DOMAIN} {
    bind 0.0.0.0
    redir https://{$SELF_STEAL_DOMAIN}{uri} permanent
    log {
        output file /var/log/caddy/redirect.log {
            roll_size 5MB
            roll_keep 3
            roll_keep_for 168h
        }
    }
}

https://{$SELF_STEAL_DOMAIN} {
    root * /var/www/html
    try_files {path} /index.html
    file_server
    log {
        output file /var/log/caddy/access.log {
            roll_size 10MB
            roll_keep 5
            roll_keep_for 720h
            roll_compression gzip
        }
        level ERROR
    }
}

:{$SELF_STEAL_PORT} {
    tls internal
    respond 204
    log off
}

:80 {
    bind 0.0.0.0
    respond 204
    log off
}
EOF

    echo -e "${GREEN}‚úÖ –§–∞–π–ª Caddyfile —Å–æ–∑–¥–∞–Ω${NC}"    # Install random template instead of default HTML
    echo
    echo -e "${WHITE}üé® –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —Å–∞–π—Ç–∞${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 35))${NC}"
    
    # List of available templates (only 2 options)
    local templates=("1" "2")
    local template_names=("503 Error v1" "503 Error v2")
    
    echo -e "${WHITE}–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:${NC}"
    echo -e "${GRAY}  1. 503 Error v1${NC}"
    echo -e "${GRAY}  2. 503 Error v2${NC}"
    echo
    
    # Ask user to choose
    while true; do
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (1-2): " template_choice
        if [[ "$template_choice" =~ ^[12]$ ]]; then
            break
        else
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2${NC}"
        fi
    done
    
    local selected_template="$template_choice"
    local selected_name=${template_names[$((template_choice-1))]}
    local installed_template=""
    
    echo -e "${CYAN}‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: ${selected_name}${NC}"
    echo
    
    if download_template "$selected_template"; then
        echo -e "${GREEN}‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        installed_template="$selected_name template"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω, —Å–æ–∑–¥–∞—é –∑–∞–ø–∞—Å–Ω–æ–π${NC}"
        create_default_html
        installed_template="Default template (fallback)"
    fi

    # Install management script
    install_management_script

    # Start services
    echo
    echo -e "${WHITE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ Caddy${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    
    cd "$APP_DIR"
    echo -e "${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Caddyfile...${NC}"

    if [ ! -f "$APP_DIR/Caddyfile" ]; then
        echo -e "${RED}‚ùå Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $APP_DIR/Caddyfile${NC}"
        return 1
    fi

    if validate_caddyfile; then
        echo -e "${GREEN}‚úÖ Caddyfile –≤–∞–ª–∏–¥–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Caddyfile${NC}"
        echo -e "${YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: sudo $APP_NAME edit${NC}"
        return 1
    fi

    if docker compose up -d; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã Caddy —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy${NC}"
        return 1
    fi

    # Installation complete
    echo
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
    echo -e "${WHITE}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
    echo
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–î–æ–º–µ–Ω:" "$domain"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "HTTPS-–ø–æ—Ä—Ç:" "$port"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" "$APP_DIR"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "HTML-–∫–æ–Ω—Ç–µ–Ω—Ç:" "$HTML_DIR"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:" "$installed_template"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" "$APP_NAME"
      echo
    echo -e "${WHITE}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Xray Reality:${NC}"
    echo -e "${GRAY}     - serverNames: [\"$domain\"]${NC}"
    echo -e "${GRAY}     - dest: \"127.0.0.1:$port\"${NC}"
    echo -e "${GRAY}   ‚Ä¢ –°–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω: sudo $APP_NAME template${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç HTML –≤: $HTML_DIR${NC}"
    echo -e "${GRAY}   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: sudo $APP_NAME status${NC}"
    echo -e "${GRAY}   ‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: sudo $APP_NAME logs${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
}

validate_caddyfile() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Caddyfile...${NC}"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if [ -f "$APP_DIR/.env" ]; then
        export $(grep -v '^#' "$APP_DIR/.env" | xargs)
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if [ -z "$SELF_STEAL_DOMAIN" ] || [ -z "$SELF_STEAL_PORT" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏${NC}"
        export SELF_STEAL_DOMAIN="example.com"
        export SELF_STEAL_PORT="9443"
    fi
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ volume —á—Ç–æ –∏ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    if docker run --rm \
        -v "$APP_DIR/Caddyfile:/etc/caddy/Caddyfile:ro" \
        -v "/etc/letsencrypt:/etc/letsencrypt:ro" \
        -v "$APP_DIR/html:/var/www/html:ro" \
        -e "SELF_STEAL_DOMAIN=$SELF_STEAL_DOMAIN" \
        -e "SELF_STEAL_PORT=$SELF_STEAL_PORT" \
        caddy:${CADDY_VERSION}-alpine \
        caddy validate --config /etc/caddy/Caddyfile 2>&1; then
        echo -e "${GREEN}‚úÖ Caddyfile –≤–∞–ª–∏–¥–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Caddyfile${NC}"
        echo -e "${YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: sudo $APP_NAME edit${NC}"
        return 1
    fi
}

show_current_template_info() {
    echo -e "${WHITE}üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —à–∞–±–ª–æ–Ω–µ${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 35))${NC}"
    echo
    
    if [ ! -d "$HTML_DIR" ] || [ ! "$(ls -A "$HTML_DIR" 2>/dev/null)" ]; then
        echo -e "${GRAY}   –®–∞–±–ª–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ -f "$HTML_DIR/index.html" ]; then
        local title=$(grep -o '<title>[^<]*</title>' "$HTML_DIR/index.html" 2>/dev/null | sed 's/<title>\|<\/title>//g' | head -1)
        local meta_comment=$(grep -o '<!-- [a-f0-9]\{16\} -->' "$HTML_DIR/index.html" 2>/dev/null | head -1)
        local file_count=$(find "$HTML_DIR" -type f | wc -l)
        local total_size=$(du -sh "$HTML_DIR" 2>/dev/null | cut -f1)
        
        echo -e "${WHITE}   –ó–∞–≥–æ–ª–æ–≤–æ–∫:${NC} ${GRAY}${title:-"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}${NC}"
        echo -e "${WHITE}   –§–∞–π–ª–æ–≤:${NC} ${GRAY}$file_count${NC}"
        echo -e "${WHITE}   –†–∞–∑–º–µ—Ä:${NC} ${GRAY}$total_size${NC}"
        echo -e "${WHITE}   –ü—É—Ç—å:${NC} ${GRAY}$HTML_DIR${NC}"
        
        if [ -n "$meta_comment" ]; then
            echo -e "${WHITE}   ID:${NC} ${GRAY}$meta_comment${NC}"
        fi
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        local last_modified=$(stat -c %y "$HTML_DIR/index.html" 2>/dev/null | cut -d' ' -f1)
        if [ -n "$last_modified" ]; then
            echo -e "${WHITE}   –ò–∑–º–µ–Ω—ë–Ω:${NC} ${GRAY}$last_modified${NC}"
        fi
    else
        echo -e "${GRAY}   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω${NC}"
        echo -e "${WHITE}   –ü—É—Ç—å:${NC} ${GRAY}$HTML_DIR${NC}"
    fi
    echo
}

download_template() {
    local template_type="$1"
    local template_folder=""
    local template_name=""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    case "$template_type" in
        "1"|"10gag")
            template_folder="10gag"
            template_name="10gag - –°–∞–π—Ç –º–µ–º–æ–≤"
            ;;
        "2"|"converter")
            template_folder="converter"
            template_name="Converter - –í–∏–¥–µ–æ—Å—Ç—É–¥–∏—è-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä"
            ;;
        "3"|"convertit")
            template_folder="convertit"
            template_name="Convertit - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ñ–∞–π–ª–æ–≤"
            ;;
        "4"|"downloader")
            template_folder="downloader"
            template_name="Downloader - –î–∞—É–Ω–ª–æ–∞–¥–µ—Ä"
            ;;
        "5"|"filecloud")
            template_folder="filecloud"
            template_name="FileCloud - –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
            ;;
        "6"|"games-site")
            template_folder="games-site"
            template_name="Games-site - –†–µ—Ç—Ä–æ –∏–≥—Ä–æ–≤–æ–π –ø–æ—Ä—Ç–∞–ª"
            ;;
        "7"|"modmanager")
            template_folder="modmanager"
            template_name="ModManager - –ú–æ–¥-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–≥—Ä"
            ;;
        "8"|"speedtest")
            template_folder="speedtest"
            template_name="SpeedTest - –°–ø–∏–¥—Ç–µ—Å—Ç"
            ;;
        "9"|"youtube")
            template_folder="YouTube"
            template_name="YouTube - –í–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ —Å –∫–∞–ø—á–µ–π"
            ;;
        "10"|"503")
            template_folder="503-1"
            template_name="503 Error - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ 503 - –≤–∞—Ä–∏–∞–Ω—Ç 1"
            ;;
        "11"|"503")
            template_folder="503-2"
            template_name="503 Error - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ 503 - –≤–∞—Ä–∏–∞–Ω—Ç 2"
        ;;
        *)
            echo -e "${RED}‚ùå Unknown template type: $template_type${NC}"
            return 1
            ;;
    esac
    
    echo -e "${WHITE}üé® –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞: $template_name${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
    echo
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    mkdir -p "$HTML_DIR"
    rm -rf "$HTML_DIR"/*
    cd "$HTML_DIR"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ git (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if command -v git >/dev/null 2>&1; then
        echo -e "${WHITE}üì¶ –ò—Å–ø–æ–ª—å–∑—É—é Git –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...${NC}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        local temp_dir="/tmp/selfsteal-template-$$"
        mkdir -p "$temp_dir"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ sparse-checkout
        if git clone --filter=blob:none --sparse "https://github.com/Spakieone/Remna.git" "$temp_dir" 2>/dev/null; then
            cd "$temp_dir"
            git sparse-checkout set "sni-templates/$template_folder" 2>/dev/null
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            local source_path="$temp_dir/sni-templates/$template_folder"
            if [ -d "$source_path" ]; then
                if cp -r "$source_path"/* "$HTML_DIR/" 2>/dev/null; then
                    local files_copied=$(find "$HTML_DIR" -type f | wc -l)
                    echo -e "${GREEN}‚úÖ –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: $files_copied —Ñ–∞–π–ª–æ–≤${NC}"
                    
                    # –û—á–∏—Å—Ç–∫–∞
                    rm -rf "$temp_dir"
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    setup_file_permissions
                    
                    show_download_summary "$files_copied" "$template_name"
                    return 0
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  –ú–µ—Ç–æ–¥ Git –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é wget...${NC}"
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è  –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–±—É—é wget...${NC}"
            fi
            
            # –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
            rm -rf "$temp_dir"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Git, –ø—Ä–æ–±—É—é wget...${NC}"
        fi
    fi
    
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º wget –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if command -v wget >/dev/null 2>&1; then
        echo -e "${WHITE}üì¶ –ò—Å–ø–æ–ª—å–∑—É—é wget –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...${NC}"
        
        local base_url="https://raw.githubusercontent.com/Spakieone/Remna/main/sni-templates/$template_folder"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ GitHub API
        local api_url="https://api.github.com/repos/Spakieone/Remna/git/trees/main?recursive=1"
        local tree_data
        tree_data=$(curl -s "$api_url" 2>/dev/null)
        
        if [ -n "$tree_data" ] && echo "$tree_data" | grep -q '"path"'; then
            echo -e "${GREEN}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞${NC}"
            echo -e "${WHITE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...${NC}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            local template_files
            template_files=$(echo "$tree_data" | grep -o "\"path\":[^,]*" | sed 's/"path":"//' | sed 's/"//' | grep "^sni-templates/$template_folder/")
            
            local files_downloaded=0
            local failed_downloads=0
            
            if [ -n "$template_files" ]; then
                while IFS= read -r file_path; do
                    if [ -n "$file_path" ]; then
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º sni-templates/$template_folder/)
                        local relative_path="${file_path#sni-templates/$template_folder/}"
                        local file_url="https://raw.githubusercontent.com/Spakieone/Remna/main/$file_path"
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        local file_dir=$(dirname "$relative_path")
                        if [ "$file_dir" != "." ]; then
                            mkdir -p "$file_dir"
                        fi
                        
                        echo -e "${GRAY}   –°–∫–∞—á–∏–≤–∞—é $relative_path...${NC}"
                        
                        if wget -q "$file_url" -O "$relative_path" 2>/dev/null; then
                            echo -e "${GREEN}   ‚úÖ $relative_path${NC}"
                            ((files_downloaded++))
                        else
                            echo -e "${YELLOW}   ‚ö†Ô∏è  $relative_path (–æ—à–∏–±–∫–∞)${NC}"
                            ((failed_downloads++))
                        fi
                    fi
                done <<< "$template_files"
                
                if [ $files_downloaded -gt 0 ]; then
                    setup_file_permissions
                    show_download_summary "$files_downloaded" "$template_name"
                    return 0
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É—é –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± —Å curl...${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –ø—Ä–æ–±—É—é curl...${NC}"
        fi
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: curl —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
    echo -e "${WHITE}üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ curl...${NC}"
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —à–∞–±–ª–æ–Ω–æ–≤
    local common_files=("index.html" "favicon.ico" "favicon.svg" "site.webmanifest" "apple-touch-icon.png" "favicon-96x96.png" "web-app-manifest-192x192.png" "web-app-manifest-512x512.png")
    local asset_files=("assets/style.css" "assets/script.js" "assets/main.js")
    
    local base_url="https://raw.githubusercontent.com/Spakieone/Remna/main/sni-templates/$template_folder"
    local files_downloaded=0
    local failed_downloads=0
    
    echo -e "${WHITE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file in "${common_files[@]}"; do
        local url="$base_url/$file"
        echo -e "${GRAY}   –°–∫–∞—á–∏–≤–∞—é $file...${NC}"
        
        if curl -fsSL "$url" -o "$file" 2>/dev/null; then
            echo -e "${GREEN}   ‚úÖ $file${NC}"
            ((files_downloaded++))
        else
            echo -e "${YELLOW}   ‚ö†Ô∏è  $file (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)${NC}"
            ((failed_downloads++))
        fi
    done
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã assets
    mkdir -p assets
    echo -e "${WHITE}üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ assets...${NC}"
    
    for file in "${asset_files[@]}"; do
        local url="$base_url/$file"
        local filename=$(basename "$file")
        echo -e "${GRAY}   –°–∫–∞—á–∏–≤–∞—é assets/$filename...${NC}"
        
        if curl -fsSL "$url" -o "assets/$filename" 2>/dev/null; then
            echo -e "${GREEN}   ‚úÖ assets/$filename${NC}"
            ((files_downloaded++))
        else
            echo -e "${YELLOW}   ‚ö†Ô∏è  assets/$filename (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)${NC}"
            ((failed_downloads++))
        fi
    done
    
    if [ $files_downloaded -gt 0 ]; then
        setup_file_permissions
        show_download_summary "$files_downloaded" "$template_name"
        return 0
    else
        echo -e "${RED}‚ùå Failed to download any files${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Creating fallback template...${NC}"
        create_fallback_html "$template_name"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
setup_file_permissions() {
    echo -e "${WHITE}üîí Setting up file permissions...${NC}"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã
    chmod -R 644 "$HTML_DIR"/* 2>/dev/null || true
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    find "$HTML_DIR" -type d -exec chmod 755 {} \; 2>/dev/null || true
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    chown -R www-data:www-data "$HTML_DIR" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ File permissions configured${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
show_download_summary() {
    local files_count="$1"
    local template_name="$2"
    
    echo
    echo -e "${WHITE}üìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 25))${NC}"
    printf "   ${WHITE}%-20s${NC} ${GREEN}%d${NC}\n" "–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:" "$files_count"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–®–∞–±–ª–æ–Ω:" "$template_name"
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ü—É—Ç—å:" "$HTML_DIR"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä
    local total_size=$(du -sh "$HTML_DIR" 2>/dev/null | cut -f1 || echo "Unknown")
    printf "   ${WHITE}%-20s${NC} ${GRAY}%s${NC}\n" "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:" "$total_size"
    
    echo
    echo -e "${GREEN}‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
}

# Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ HTML –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
create_fallback_html() {
    local template_name="$1"
    
    cat > "index.html" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$template_name</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        .container {
            text-align: center;
            max-width: 600px;
            padding: 2rem;
        }
        h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        p {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 2rem;
        }
        .status {
            background: rgba(255,255,255,0.1);
            padding: 1rem 2rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Service Ready</h1>
        <p>$template_name template is now active</p>
        <div class="status">
            <p>‚úÖ System Online</p>
        </div>
    </div>
</body>
</html>
EOF
}

# Create default HTML content for initial installation
create_default_html() {
    echo -e "${WHITE}üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞${NC}"
    
    cat > "$HTML_DIR/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 500px;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        p {
            color: #666;
            line-height: 1.6;
            margin-bottom: 15px;
        }
        .status {
            display: inline-block;
            background: #4CAF50;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
            margin-top: 20px;
        }
        .info {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 4px solid #667eea;
        }
        .info h3 {
            color: #333;
            margin-bottom: 10px;
        }
        .command {
            background: #2d3748;
            color: #e2e8f0;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåê Caddy for Reality Selfsteal</h1>
        <p>–°–µ—Ä–≤–µ—Ä Caddy —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–¥–∞–≤–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç.</p>
        <div class="status">‚úÖ –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω</div>
        <div class="info">
            <h3>üé® –ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–æ–≤</h3>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤:</p>
            <div class="command">sudo selfsteal template</div>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã 10 –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: –º–µ–º—ã, –∑–∞–≥—Ä—É–∑—á–∏–∫–∏, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –∏ –¥—Ä.</p>
        </div>
    </div>
</body>
</html>
EOF

    # Create 404 page
    cat > "$HTML_DIR/404.html" << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 40px;
            background: #f5f5f5;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 500px;
        }
        h1 {
            color: #e74c3c;
            font-size: 4rem;
            margin-bottom: 20px;
        }
        h2 {
            color: #333;
            margin-bottom: 15px;
        }
        p {
            color: #666;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>404</h1>        <h2>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
        <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
    </div>
</body>
</html>
EOF
    echo -e "${GREEN}‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω${NC}"
}

# Function to show template options
show_template_options() {
    echo -e "${WHITE}üé® –í–∞—Ä–∏–∞–Ω—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ —Å–∞–π—Ç–∞${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 35))${NC}"
    echo
    echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞:${NC}"
    echo -e "   ${WHITE}1)${NC} ${CYAN}‚ö†Ô∏è 503 Error - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ 503 v1${NC}"
    echo -e "   ${WHITE}2)${NC} ${CYAN}‚ö†Ô∏è 503 Error - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ 503 v2${NC}"
    echo
    echo -e "   ${WHITE}v)${NC} ${GRAY}üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω${NC}"
    echo -e "   ${WHITE}k)${NC} ${GRAY}üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω${NC}"
    echo
    echo -e "   ${GRAY}0)${NC} ${GRAY}‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞${NC}"
    echo
}


# Template management command
template_command() {
    check_running_as_root
    if ! docker --version >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi

    if [ ! -d "$APP_DIR" ]; then
        echo -e "${RED}‚ùå Caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'sudo $APP_NAME install'.${NC}"
        return 1
    fi
    

    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
    if [ "$running_services" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Caddy —Å–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${GRAY}   –ò–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ä–∞–∑—É${NC}"
        echo
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–∞? [Y/n]: " -r continue_template
        if [[ $continue_template =~ ^[Nn]$ ]]; then
            return 0
        fi
    fi
    
    
    while true; do
        clear
        show_template_options
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —à–∞–±–ª–æ–Ω–∞ [1-2, v, k]: " choice
        
        case "$choice" in
            1)
                echo
                if download_template "10"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω 503 Error v1 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω 503 Error v1${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            2)
                echo
                if download_template "11"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω 503 Error v2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω 503 Error v2${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            3)
                echo
                if download_template "3"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω Convertit —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Convertit${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            4)
                echo
                if download_template "4"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω Downloader —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Downloader${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            5)
                echo
                if download_template "5"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω FileCloud —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω FileCloud${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            6)
                echo
                if download_template "6"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω Games-site —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Games-site${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            7)
                echo
                if download_template "7"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω ModManager —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω ModManager${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            8)
                echo
                if download_template "8"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω SpeedTest —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω SpeedTest${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            9)
                echo
                if download_template "9"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω YouTube —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "Restart Caddy to apply changes? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω YouTube${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            10)
                echo
                if download_template "10"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω 503 Error —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "Restart Caddy to apply changes? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω 503 Error${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            11)
                echo
                if download_template "11"; then
                    echo -e "${GREEN}üéâ –®–∞–±–ª–æ–Ω 503 Error v2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!${NC}"
                    echo
                    local running_services=$(cd "$APP_DIR" && docker compose ps -q 2>/dev/null | wc -l || echo "0")
                    if [ "$running_services" -gt 0 ]; then
                        read -p "Restart Caddy to apply changes? [Y/n]: " -r restart_caddy
                        if [[ ! $restart_caddy =~ ^[Nn]$ ]]; then
                            echo -e "${YELLOW}üîÑ Restarting Caddy...${NC}"
                            cd "$APP_DIR" && docker compose restart
                            echo -e "${GREEN}‚úÖ Caddy restarted${NC}"
                        fi
                    fi
                else
                    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω 503 Error v2${NC}"
                fi
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            v|V)
                echo
                show_current_template_info
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            k|K)
                echo -e "${GRAY}Current template preserved${NC}"
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            0)
                return 0
                ;;
            *)
                echo -e "${RED}‚ùå Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}




install_management_script() {
    echo -e "${WHITE}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞${NC}"
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
    local script_path
    if [ -f "$0" ] && [ "$0" != "bash" ] && [ "$0" != "@" ]; then
        script_path="$0"
    else
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –≤ /tmp –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        local temp_script="/tmp/selfsteal-install.sh"
        if curl -fsSL "$UPDATE_URL" -o "$temp_script" 2>/dev/null; then
            script_path="$temp_script"
            echo -e "${GRAY}üì• –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç${NC}"
            echo -e "${GRAY}   –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é: $UPDATE_URL${NC}"
            return 1
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
    if [ -f "$script_path" ]; then
        cp "$script_path" "/usr/local/bin/$APP_NAME"
        chmod +x "/usr/local/bin/$APP_NAME"
        echo -e "${GREEN}‚úÖ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: /usr/local/bin/$APP_NAME${NC}"
        
        # –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        if [ "$script_path" = "/tmp/selfsteal-install.sh" ]; then
            rm -f "$script_path"
        fi
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç${NC}"
        return 1
    fi
}
# Service management functions
up_command() {
    check_running_as_root
    
    if [ ! -f "$APP_DIR/docker-compose.yml" ]; then
        echo -e "${RED}‚ùå Caddy is not installed. Run 'sudo $APP_NAME install' first.${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ Caddy${NC}"
    cd "$APP_DIR"
    
    if docker compose up -d; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã Caddy —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy${NC}"
        return 1
    fi
}

down_command() {
    check_running_as_root
    
    if [ ! -f "$APP_DIR/docker-compose.yml" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    fi
    
    echo -e "${WHITE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Caddy${NC}"
    cd "$APP_DIR"
    
    if docker compose down; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã Caddy —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy${NC}"
        return 1
    fi
}

restart_command() {
    check_running_as_root
    echo -e "${YELLOW}‚ö†Ô∏è  Validate Caddyfile after editing? [Y/n]:${NC}"
    read -p "" validate_choice
    if [[ ! $validate_choice =~ ^[Nn]$ ]]; then
        validate_caddyfile
    fi
    echo -e "${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ Caddy${NC}"
    down_command
    sleep 2
    up_command
}

status_command() {
    if [ ! -d "$APP_DIR" ]; then
        echo -e "${RED}‚ùå Caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 1
    fi

    echo -e "${WHITE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ Caddy${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    echo

    cd "$APP_DIR"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local container_status=$(docker compose ps --format "table {{.Name}}\t{{.State}}\t{{.Status}}" 2>/dev/null)
    local running_count=$(docker compose ps -q --status running 2>/dev/null | wc -l)
    local total_count=$(docker compose ps -q 2>/dev/null | wc -l)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    local actual_status=$(docker compose ps --format "{{.State}}" 2>/dev/null | head -1)
    
    if [ "$actual_status" = "running" ]; then
        echo -–µ "${GREEN}‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ($running_count/$total_count)${NC}"
    elif [ "$actual_status" = "restarting" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–æ—à–∏–±–∫–∞)${NC}"
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å –ø–∞–¥–∞–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ($running_count/$total_count)${NC}"
        echo -e "${YELLOW}üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏${NC}"
    elif [ -n "$actual_status" ]; then
        echo -e "${RED}‚ùå –°—Ç–∞—Ç—É—Å: $actual_status${NC}"
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã ($running_count/$total_count)${NC}"
    else
        echo -e "${RED}‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi

    echo
    echo -e "${WHITE}üìã –°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:${NC}"
    if [ -n "$container_status" ]; then
        echo "$container_status"
    else
        echo -e "${GRAY}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    if [ "$actual_status" = "restarting" ]; then
        echo
        echo -e "${YELLOW}üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:${NC}"
        echo -e "${GRAY}   1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: selfsteal logs${NC}"
        echo -e "${GRAY}   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: selfsteal edit${NC}"
        echo -e "${GRAY}   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: selfsteal restart${NC}"
    fi
    
    # Show configuration summary
    if [ -f "$APP_DIR/.env" ]; then
        echo
        echo -e "${WHITE}‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
        local domain=$(grep "SELF_STEAL_DOMAIN=" "$APP_DIR/.env" | cut -d'=' -f2)
        local port=$(grep "SELF_STEAL_PORT=" "$APP_DIR/.env" | cut -d'=' -f2)
        
        printf "   ${WHITE}%-15s${NC} ${GRAY}%s${NC}\n" "–î–æ–º–µ–Ω:" "$domain"
        printf "   ${WHITE}%-15s${NC} ${GRAY}%s${NC}\n" "HTTPS-–ø–æ—Ä—Ç:" "$port"
        printf "   ${WHITE}%-15s${NC} ${GRAY}%s${NC}\n" "–ü—É—Ç—å –∫ HTML:" "$HTML_DIR"
    fi
    printf "   ${WHITE}%-15s${NC} ${GRAY}%s${NC}\n" "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞:" "v$SCRIPT_VERSION"
}

logs_command() {
    if [ ! -f "$APP_DIR/docker-compose.yml" ]; then
        echo -e "${RED}‚ùå Caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üìù –õ–æ–≥–∏ Caddy${NC}"
    echo -e "${GRAY}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞${NC}"
    echo
    
    cd "$APP_DIR"
    docker compose logs -f
}


# Clean logs function
clean_logs_command() {
    check_running_as_root
    
    if [ ! -d "$APP_DIR" ]; then
        echo -e "${RED}‚ùå Caddy is not installed${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 25))${NC}"
    echo
    
    # Show current log sizes
    echo -e "${WHITE}üìä –¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –ª–æ–≥–æ–≤:${NC}"
    
    # Docker logs
    local docker_logs_size
    docker_logs_size=$(docker logs $CONTAINER_NAME 2>&1 | wc -c 2>/dev/null || echo "0")
    docker_logs_size=$((docker_logs_size / 1024))
    echo -e "${GRAY}   –õ–æ–≥–∏ Docker: ${WHITE}${docker_logs_size}KB${NC}"
    
    # Caddy access logs
    local caddy_logs_path="$APP_DIR/caddy_data/_logs"
    if [ -d "$caddy_logs_path" ]; then
        local caddy_logs_size
        caddy_logs_size=$(du -sk "$caddy_logs_path" 2>/dev/null | cut -f1 || echo "0")
        echo -e "${GRAY}   –õ–æ–≥–∏ Caddy: ${WHITE}${caddy_logs_size}KB${NC}"
    fi
    
    echo
    read -p "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏? [y/N]: " -r clean_choice
    
    if [[ $clean_choice =~ ^[Yy]$ ]]; then
        echo -e "${WHITE}üßπ –û—á–∏—â–∞—é –ª–æ–≥–∏...${NC}"
        
        # Clean Docker logs by recreating container
        if docker ps -q -f name=$CONTAINER_NAME >/dev/null 2>&1; then
            echo -e "${GRAY}   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Caddy...${NC}"
            cd "$APP_DIR" && docker compose stop
            
            echo -e "${GRAY}   –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤...${NC}"
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            echo -e "${GRAY}   –ó–∞–ø—É—Å–∫ Caddy...${NC}"
            cd "$APP_DIR" && docker compose up -d
        fi
        
        # Clean Caddy internal logs
        if [ -d "$caddy_logs_path" ]; then
            echo -e "${GRAY}   –û—á–∏—Å—Ç–∫–∞ access-–ª–æ–≥–æ–≤ Caddy...${NC}"
            rm -rf "$caddy_logs_path"/* 2>/dev/null || true
        fi
        
        echo -e "${GREEN}‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${GRAY}–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
    fi
}

# Show log sizes function
logs_size_command() {
    check_running_as_root
    
    if [ ! -d "$APP_DIR" ]; then
        echo -e "${RED}‚ùå Caddy is not installed${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üìä –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–æ–≤${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 25))${NC}"
    echo
    
    # Docker logs
    local docker_logs_size
    if docker ps -q -f name=$CONTAINER_NAME >/dev/null 2>&1; then
        docker_logs_size=$(docker logs $CONTAINER_NAME 2>&1 | wc -c 2>/dev/null || echo "0")
        docker_logs_size=$((docker_logs_size / 1024))
        echo -e "${WHITE}üìã –õ–æ–≥–∏ Docker:${NC} ${GRAY}${docker_logs_size}KB${NC}"
    else
        echo -e "${WHITE}üìã –õ–æ–≥–∏ Docker:${NC} ${GRAY}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
    fi
    
    # Caddy access logs
    local caddy_data_dir
    caddy_data_dir=$(cd "$APP_DIR" && docker volume inspect "${APP_DIR##*/}_${VOLUME_PREFIX}_data" --format '{{.Mountpoint}}' 2>/dev/null || echo "")
    
    if [ -n "$caddy_data_dir" ] && [ -d "$caddy_data_dir" ]; then
        local access_log="$caddy_data_dir/access.log"
        if [ -f "$access_log" ]; then
            local access_log_size
            access_log_size=$(du -k "$access_log" 2>/dev/null | cut -f1 || echo "0")
        echo -e "${WHITE}üìÑ Access-–ª–æ–≥:${NC} ${GRAY}${access_log_size}KB${NC}"
        else
            echo -e "${WHITE}üìÑ Access-–ª–æ–≥:${NC} ${GRAY}–ù–µ –Ω–∞–π–¥–µ–Ω${NC}"
        fi
        
        # Check for rotated logs
        local rotated_logs
        rotated_logs=$(find "$caddy_data_dir" -name "access.log.*" 2>/dev/null | wc -l || echo "0")
        if [ "$rotated_logs" -gt 0 ]; then
            local rotated_size
            rotated_size=$(find "$caddy_data_dir" -name "access.log.*" -exec du -k {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            echo -e "${WHITE}üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤:${NC} ${GRAY}${rotated_size}KB (${rotated_logs} —Ñ–∞–π–ª–æ–≤)${NC}"
        fi
    else
        echo -e "${WHITE}üìÑ –õ–æ–≥–∏ Caddy:${NC} ${GRAY}–¢–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # Logs directory
    if [ -d "$APP_DIR/logs" ]; then
        local logs_dir_size
        logs_dir_size=$(du -sk "$APP_DIR/logs" 2>/dev/null | cut -f1 || echo "0")
        echo -e "${WHITE}üìÅ –ö–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤:${NC} ${GRAY}${logs_dir_size}KB${NC}"
    fi
    
    echo
    echo -e "${GRAY}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'sudo $APP_NAME clean-logs' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤${NC}"
    echo
}

stop_services() {
    if [ -f "$APP_DIR/docker-compose.yml" ]; then
        cd "$APP_DIR"
        docker compose down 2>/dev/null || true
    fi
}

uninstall_command() {
    check_running_as_root
    
    echo -e "${WHITE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Caddy${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    echo
    
    if [ ! -d "$APP_DIR" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç Caddy –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!${NC}"
    echo
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N]: " -r confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${GRAY}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ${NC}"
        return 0
    fi
    
    echo
    echo -e "${WHITE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    stop_services
    
    echo -e "${WHITE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...${NC}"
    rm -rf "$APP_DIR"
    
    echo -e "${WHITE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...${NC}"
    rm -f "/usr/local/bin/$APP_NAME"
    
    echo -e "${GREEN}‚úÖ Caddy —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω${NC}"
    echo
    echo -e "${GRAY}–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ $HTML_DIR —Å–æ—Ö—Ä–∞–Ω—ë–Ω${NC}"
}

edit_command() {
    check_running_as_root
    
    if [ ! -d "$APP_DIR" ]; then
        echo -e "${RED}‚ùå Caddy is not installed${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 30))${NC}"
    echo
    
    echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "   ${WHITE}1)${NC} ${GRAY}.env (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞ –∏ –ø–æ—Ä—Ç–∞)${NC}"
    echo -e "   ${WHITE}2)${NC} ${GRAY}Caddyfile (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Caddy)${NC}"
    echo -e "   ${WHITE}3)${NC} ${GRAY}docker-compose.yml (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker)${NC}"
    echo -e "   ${WHITE}0)${NC} ${GRAY}–û—Ç–º–µ–Ω–∞${NC}"
    echo
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [0-3]: " choice
    
    case "$choice" in
        1)
            ${EDITOR:-nano} "$APP_DIR/.env"
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: sudo $APP_NAME restart${NC}"
            ;;
        2)
            ${EDITOR:-nano} "$APP_DIR/Caddyfile"
            echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Caddyfile –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? [Y/n]:${NC}"
            read -p "" validate_choice
            if [[ ! $validate_choice =~ ^[Nn]$ ]]; then
                validate_caddyfile
            fi
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: sudo $APP_NAME restart${NC}"
            ;;
        3)
            ${EDITOR:-nano} "$APP_DIR/docker-compose.yml"
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Caddy –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: sudo $APP_NAME restart${NC}"
            ;;
        0)
            echo -e "${GRAY}–û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è${NC}"
            ;;
    esac
}




show_help() {
    echo -e "${WHITE}–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Caddy for Reality Selfsteal v$SCRIPT_VERSION${NC}"
    echo
    echo -e "${WHITE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo -e "  ${CYAN}$APP_NAME${NC} [${GRAY}–∫–æ–º–∞–Ω–¥–∞${NC}]"
    echo
    echo -e "${WHITE}–ö–æ–º–∞–Ω–¥—ã:${NC}"
    printf "   ${CYAN}%-12s${NC} %s\n" "install" "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Caddy –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ Reality"
    printf "   ${CYAN}%-12s${NC} %s\n" "up" "‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy"
    printf "   ${CYAN}%-12s${NC} %s\n" "down" "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy"
    printf "   ${CYAN}%-12s${NC} %s\n" "restart" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã Caddy"
    printf "   ${CYAN}%-12s${NC} %s\n" "status" "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    printf "   ${CYAN}%-12s${NC} %s\n" "logs" "üìù –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
    printf "   ${CYAN}%-12s${NC} %s\n" "logs-size" "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ª–æ–≥–æ–≤"
    printf "   ${CYAN}%-12s${NC} %s\n" "clean-logs" "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏"
    printf "   ${CYAN}%-12s${NC} %s\n" "edit" "‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    printf "   ${CYAN}%-12s${NC} %s\n" "uninstall" "üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Caddy"
    printf "   ${CYAN}%-12s${NC} %s\n" "template" "üé® –£–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–∞–π—Ç–∞"
    printf "   ${CYAN}%-12s${NC} %s\n" "menu" "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
    printf "   ${CYAN}%-12s${NC} %s\n" "update" "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"
    echo
    echo -e "${WHITE}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo -e "  ${GRAY}sudo $APP_NAME install${NC}"
    echo -e "  ${GRAY}sudo $APP_NAME status${NC}"
    echo -e "  ${GRAY}sudo $APP_NAME logs${NC}"
    echo
    echo -e "${WHITE}–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏—Ç–µ:${NC}"
    echo -e "  ${BLUE}https://github.com/Spakieone/Remna${NC}"
}

check_for_updates() {
    echo -e "${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...${NC}"
    
    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  curl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}"
        return 1
    fi
    
    # Get latest version from GitHub script
    echo -e "${WHITE}üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞...${NC}"
    local remote_script_version
    remote_script_version=$(curl -s "$UPDATE_URL" 2>/dev/null | grep "^SCRIPT_VERSION=" | cut -d'"' -f2)
    
    if [ -z "$remote_script_version" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é${NC}"
        return 1
    fi
    
    echo -e "${WHITE}üìù –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${GRAY}v$SCRIPT_VERSION${NC}"
    echo -e "${WHITE}üì¶ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:  ${GRAY}v$remote_script_version${NC}"
    echo
    
    # Compare versions
    if [ "$SCRIPT_VERSION" = "$remote_script_version" ]; then
        echo -e "${GREEN}‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è${NC}"
        return 0
    else
        echo -e "${YELLOW}üîÑ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!${NC}"
        echo
        
        # Try to get changelog/release info if available
        echo -e "${WHITE}–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ v$remote_script_version:${NC}"
        echo -e "${GRAY}‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è${NC}"
        echo -e "${GRAY}‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å${NC}"
        echo -e "${GRAY}‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏${NC}"
        
        echo
        read -p "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å? [Y/n]: " -r update_choice
        
        if [[ ! $update_choice =~ ^[Nn]$ ]]; then
            update_script
        else
            echo -e "${GRAY}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ${NC}"
        fi
    fi
}

# Update script function
update_script() {
    echo -e "${WHITE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞...${NC}"
    
    # Create backup
    local backup_file="/tmp/caddy-selfsteal-backup-$(date +%Y%m%d_%H%M%S).sh"
    if cp "$0" "$backup_file" 2>/dev/null; then
        echo -e "${GRAY}üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_file${NC}"
    fi
    
    # Download new version
    local temp_file="/tmp/caddy-selfsteal-update-$$.sh"
    
    if curl -fsSL "$UPDATE_URL" -o "$temp_file" 2>/dev/null; then
        # Verify downloaded file
        if [ -s "$temp_file" ] && head -1 "$temp_file" | grep -q "#!/"; then
            # Get new version from downloaded script
            local new_version=$(grep "^SCRIPT_VERSION=" "$temp_file" | cut -d'"' -f2)
            
            # Check if running as root for system-wide update
            if [ "$EUID" -eq 0 ]; then
                # Update system installation
                if [ -f "/usr/local/bin/$APP_NAME" ]; then
                    cp "$temp_file" "/usr/local/bin/$APP_NAME"
                    chmod +x "/usr/local/bin/$APP_NAME"
                    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω${NC}"
                fi
                
                # Update current script if different location
                if [ "$0" != "/usr/local/bin/$APP_NAME" ]; then
                    cp "$temp_file" "$0"
                    chmod +x "$0"
                    echo -e "${GREEN}‚úÖ –¢–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω${NC}"
                fi
            else
                # User-level update
                cp "$temp_file" "$0"
                chmod +x "$0"
                echo -e "${GREEN}‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω${NC}"
                echo -e "${YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏${NC}"
            fi
            
            rm -f "$temp_file"
            
            echo
            echo -e "${WHITE}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
            echo -e "${WHITE}üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏: ${GRAY}v$new_version${NC}"
            echo -e "${GRAY}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏${NC}"
            echo
            
            read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–µ–π—á–∞—Å? [Y/n]: " -r restart_choice
            if [[ ! $restart_choice =~ ^[Nn]$ ]]; then
                echo -e "${GRAY}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...${NC}"
                exec "$0" "$@"
            fi
        else
            echo -e "${RED}‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω${NC}"
            rm -f "$temp_file"
            return 1
        fi
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ${NC}"
        rm -f "$temp_file"
        return 1
    fi
}

# Auto-update check (silent)
check_for_updates_silent() {
    # Simple silent check for updates
    if command -v curl >/dev/null 2>&1; then
        local remote_script_version
        remote_script_version=$(timeout 5 curl -s "$UPDATE_URL" 2>/dev/null | grep "^SCRIPT_VERSION=" | cut -d'"' -f2 2>/dev/null)
        
        if [ -n "$remote_script_version" ] && [ "$SCRIPT_VERSION" != "$remote_script_version" ]; then
            echo -e "${YELLOW}üí° –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: v$remote_script_version (—Ç–µ–∫—É—â–∞—è: v$SCRIPT_VERSION)${NC}"
            echo -e "${GRAY}   –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'sudo $APP_NAME update' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}"
            echo
        fi
    fi 2>/dev/null || true  # Suppress any errors completely
}

# Manual update command
update_command() {
    check_running_as_root
    check_for_updates
}

# Guide and instructions command
guide_command() {
    clear
    echo -e "${WHITE}üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Selfsteal${NC}"
    echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 50))${NC}"
    echo

    # Get current configuration
    local domain=""
    local port=""
    if [ -f "$APP_DIR/.env" ]; then
        domain=$(grep "SELF_STEAL_DOMAIN=" "$APP_DIR/.env" 2>/dev/null | cut -d'=' -f2)
        port=$(grep "SELF_STEAL_PORT=" "$APP_DIR/.env" 2>/dev/null | cut -d'=' -f2)
    fi

    echo -e "${BLUE}üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ Selfsteal?${NC}"
    echo -e "${GRAY}Selfsteal ‚Äî —ç—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ –±–∞–∑–µ Caddy –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Xray Reality, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:"
    echo "‚Ä¢ –ú–∞—Å–∫–∏—Ä–æ–≤–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–¥ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã"
    echo "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ SSL/TLS –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
    echo "‚Ä¢ –ù–∞–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏"
    echo "‚Ä¢ –ü—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Xray Reality${NC}"
    echo

    echo -e "${BLUE}üîß –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:${NC}"
    echo -e "${GRAY}1. Caddy —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º HTTPS-–ø–æ—Ä—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9443)"
    echo "2. Xray Reality –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –≤ Caddy"
    echo "3. –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –æ–±—ã—á–Ω—ã–π —Å–∞–π—Ç"
    echo "4. VPN‚Äë–∫–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª Reality${NC}"
    echo

    if [ -n "$domain" ] && [ -n "$port" ]; then
        echo -e "${GREEN}‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
        echo -e "${WHITE}   –î–æ–º–µ–Ω:${NC} ${CYAN}$domain${NC}"
        echo -e "${WHITE}   HTTPS-–ø–æ—Ä—Ç:${NC} ${CYAN}$port${NC}"
        echo -e "${WHITE}   URL —Å–∞–π—Ç–∞:${NC} ${CYAN}https://$domain:$port${NC}"
        echo
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Selfsteal –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É!${NC}"
        echo
    fi

    echo -e "${BLUE}üìã –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray Reality:${NC}"
    echo -e "${GRAY}–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à Xray‚Äë—Å–µ—Ä–≤–µ—Ä:${NC}"
    echo

    # Generate a random private key if openssl is available
    local private_key="#REPLACE_WITH_YOUR_PRIVATE_KEY"
    if command -v openssl >/dev/null 2>&1; then
        private_key=$(openssl rand -base64 32 | tr -d '=' | head -c 43)
    fi

    cat << EOF
${WHITE}{
    "inbounds": [
        {
            "tag": "VLESS_SELFSTEAL_WITH_CADDY",
            "port": 443,
            "protocol": "vless",
            "settings": {
                "clients": [],
                "decryption": "none"
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ]
            },
            "streamSettings": {
                "network": "raw",
                "security": "reality",
                "realitySettings": {
                    "show": false,
                    "xver": 1,
                    "target": "127.0.0.1:${port:-9443}",
                    "spiderX": "",
                    "shortIds": [
                        ""
                    ],
                    "privateKey": "$private_key",
                    "serverNames": [
                        "${domain:-reality.example.com}"
                    ]
                }
            }
        }
    ]
}${NC}
EOF

    echo
    echo -e "${YELLOW}üîë –ó–∞–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}clients[]${GRAY} ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö UUID${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}shortIds${GRAY} ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ Reality short IDs${NC}"
    if command -v openssl >/dev/null 2>&1; then
        echo -e "${GRAY}‚Ä¢ ${WHITE}privateKey${GRAY} ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π)${NC}"
    else
        echo -e "${GRAY}‚Ä¢ ${WHITE}privateKey${GRAY} ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ Reality key${NC}"
    fi
    if [ -z "$domain" ]; then
        echo -e "${GRAY}‚Ä¢ ${WHITE}reality.example.com${GRAY} ‚Äî –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω${NC}"
    fi
    if [ -z "$port" ] || [ "$port" != "9443" ]; then
        echo -e "${GRAY}‚Ä¢ ${WHITE}9443${GRAY} ‚Äî –≤–∞—à HTTPS‚Äë–ø–æ—Ä—Ç Caddy${NC}"
    fi
    echo

    echo -e "${BLUE}üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Reality‚Äë–∫–ª—é—á–µ–π${NC}"
    echo -e "${GRAY}‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${WHITE}Private key${GRAY} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray‚Äë—Å–µ—Ä–≤–µ—Ä–∞${NC}"
    echo

    echo -e "${BLUE}üì± –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞:${NC}"
    echo -e "${GRAY}–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (v2rayN, v2rayNG –∏ —Ç. –ø.):${NC}"
    echo -e "${WHITE}‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª:${NC} VLESS"
    echo -e "${WHITE}‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:${NC} Reality"
    echo -e "${WHITE}‚Ä¢ –°–µ—Ä–≤–µ—Ä:${NC} ${domain:-your-domain.com}"
    echo -e "${WHITE}‚Ä¢ –ü–æ—Ä—Ç:${NC} 443"
    echo -e "${WHITE}‚Ä¢ Flow:${NC} xtls-rprx-vision"
    echo -e "${WHITE}‚Ä¢ SNI:${NC} ${domain:-your-domain.com}"
    echo -e "${WHITE}‚Ä¢ Reality Public Key:${NC} (–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ x25519)"
    echo

    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:${NC}"
    echo -e "${GRAY}1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Caddy:${NC}"
    echo -e "${CYAN}   curl -k https://${domain:-your-domain.com}${NC}"
    echo
    echo -e "${GRAY}2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∞–π—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:${NC}"
    echo -e "${CYAN}   https://${domain:-your-domain.com}${NC}"
    echo
    echo -e "${GRAY}3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Xray Reality:${NC}"
    echo -e "${CYAN}   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à VPN‚Äë–∫–ª–∏–µ–Ω—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤—ã—à–µ${NC}"
    echo

    echo -e "${BLUE}üõ†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}Connection refused:${GRAY} –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Caddy –∑–∞–ø—É—â–µ–Ω (–æ–ø—Ü–∏—è 5)${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}–û—à–∏–±–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:${GRAY} —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DNS —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}Reality –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:${GRAY} –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ ${port:-9443}${NC}"
    echo -e "${GRAY}‚Ä¢ ${WHITE}–°–∞–π—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:${GRAY} –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω (–æ–ø—Ü–∏—è 6)${NC}"
    echo

    echo -e "${GREEN}üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:${NC}"
    echo -e "${GRAY}‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–∞–π—Ç–∞ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏${NC}"
    echo -e "${GRAY}‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å—é DNS-–Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ–º–µ–Ω–∞${NC}"
    echo -e "${GRAY}‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã${NC}"
    echo -e "${GRAY}‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ Caddy –∏ Xray${NC}"
    echo


    echo -e "${YELLOW}üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:${NC}"
    echo -e "${GRAY}‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Xray: ${CYAN}https://xtls.github.io/${NC}"
    echo -e "${GRAY}‚Ä¢ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Reality: ${CYAN}https://github.com/XTLS/REALITY${NC}"
    echo
}

main_menu() {    # Auto-check for updates on first run
    # check_for_updates_silent
    
    while true; do
        clear
    echo -e "${WHITE}üîó Caddy for Reality Selfsteal${NC}"
    echo -e "${GRAY}–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è v$SCRIPT_VERSION${NC}"
        echo -e "${GRAY}$(printf '‚îÄ%.0s' $(seq 1 40))${NC}"
        echo


        local menu_status="Not installed"
        local status_color="$GRAY"
        local domain=""
        local port=""
        
        if [ -d "$APP_DIR" ]; then
            if [ -f "$APP_DIR/.env" ]; then
                domain=$(grep "SELF_STEAL_DOMAIN=" "$APP_DIR/.env" 2>/dev/null | cut -d'=' -f2)
                port=$(grep "SELF_STEAL_PORT=" "$APP_DIR/.env" 2>/dev/null | cut -d'=' -f2)
            fi
            
            cd "$APP_DIR"
            local container_state=$(docker compose ps --format "{{.State}}" 2>/dev/null | head -1)
            
            case "$container_state" in
                "running")
                    menu_status="Running"
                    status_color="$GREEN"
                    ;;
                "restarting")
                    menu_status="Error (Restarting)"
                    status_color="$YELLOW"
                    ;;
                "exited"|"stopped")
                    menu_status="Stopped"
                    status_color="$RED"
                    ;;
                "paused")
                    menu_status="Paused"
                    status_color="$YELLOW"
                    ;;
                *)
                    if [ -f "$APP_DIR/docker-compose.yml" ]; then
                        menu_status="Not running"
                        status_color="$RED"
                    else
                        menu_status="Not installed"
                        status_color="$GRAY"
                    fi
                    ;;
            esac
        fi
        
        case "$menu_status" in
            "Running")
                echo -e "${status_color}‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω${NC}"
                ;;
            "Error (Restarting)")
                echo -e "${status_color}‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)${NC}"
                ;;
            "Stopped"|"Not running")
                echo -e "${status_color}‚ùå –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
                ;;
            "Paused")
                echo -e "${status_color}‚è∏Ô∏è  –°—Ç–∞—Ç—É—Å: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
                ;;
            *)
                echo -e "${status_color}üì¶ –°—Ç–∞—Ç—É—Å: $menu_status${NC}"
                ;;
        esac
        
        # Check for system Caddy
        if systemctl is-active --quiet caddy 2>/dev/null; then
            local sys_caddy_domain=""
            if [ -f "/etc/caddy/Caddyfile" ]; then
                sys_caddy_domain=$(grep -E '^[a-zA-Z0-9.-]+\s*{' /etc/caddy/Caddyfile | head -1 | awk '{print $1}' | sed 's/{$//')
            fi
            echo -e "${YELLOW}‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–Ω—ã–π Caddy –∞–∫—Ç–∏–≤–µ–Ω${NC}"
            if [ -n "$sys_caddy_domain" ]; then
                echo -e "${GRAY}   –î–æ–º–µ–Ω: $sys_caddy_domain${NC}"
            fi
        fi
        
        if [ -n "$domain" ]; then
            printf "   ${WHITE}%-10s${NC} ${GRAY}%s${NC}\n" "–î–æ–º–µ–Ω:" "$domain"
        fi
        if [ -n "$port" ]; then
            printf "   ${WHITE}%-10s${NC} ${GRAY}%s${NC}\n" "–ü–æ—Ä—Ç:" "$port"
        fi
        
        if [ "$menu_status" = "Error (Restarting)" ]; then
            echo
            echo -e "${YELLOW}‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã!${NC}"
            echo -e "${GRAY}   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ (–æ–ø—Ü–∏—è 8) –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã (–æ–ø—Ü–∏—è 4)${NC}"
        fi
        
        echo
        echo -e "${WHITE}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:${NC}"
        echo

        echo -e "${WHITE}üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:${NC}"
        echo -e "   ${WHITE}1)${NC} üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Caddy"
        echo -e "   ${WHITE}2)${NC} ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo -e "   ${WHITE}3)${NC} ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo -e "   ${WHITE}4)${NC} üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo -e "   ${WHITE}5)${NC} üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
        echo

        echo -e "${WHITE}üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º:${NC}"
        echo -e "   ${WHITE}6)${NC} üé® –®–∞–±–ª–æ–Ω—ã —Å–∞–π—Ç–æ–≤"
        echo -e "   ${WHITE}7)${NC} üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
        echo

        echo -e "${WHITE}üìù –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
        echo -e "   ${WHITE}8)${NC} üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
        echo -e "   ${WHITE}9)${NC} üìä –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–æ–≤"
        echo -e "   ${WHITE}10)${NC} üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"
        echo -e "   ${WHITE}11)${NC} ‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo

        echo -e "${WHITE}üóëÔ∏è  –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:${NC}"
        echo -e "   ${WHITE}12)${NC} üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å Caddy"
        echo -e "   ${WHITE}13)${NC} üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        echo
        echo -e "   ${GRAY}0)${NC} ‚¨ÖÔ∏è  –í—ã—Ö–æ–¥"
        echo
        case "$menu_status" in
            "Not installed")
                echo -e "${BLUE}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å –æ–ø—Ü–∏–∏ 1 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Caddy${NC}"
                ;;
            "Stopped"|"Not running")
                echo -e "${BLUE}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 2 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"
                ;;
            "Error (Restarting)")
                echo -e "${BLUE}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ (7) –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º${NC}"
                ;;
            "Running")
                echo -e "${BLUE}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 6 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–∞–π—Ç–∞${NC}"
                ;;
        esac

        read -p "$(echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [0-13]:${NC} ")" choice

        case "$choice" in
            1) install_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            2) up_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            3) down_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            4) restart_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            5) status_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            6) template_command ;;
            7) guide_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            8) logs_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            9) logs_size_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            10) clean_logs_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            11) edit_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            12) uninstall_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            13) update_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            0) clear; exit 0 ;;
            *) 
                echo -e "${RED}‚ùå Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Main execution
case "$COMMAND" in
    install) install_command ;;
    up) up_command ;;
    down) down_command ;;
    restart) restart_command ;;
    status) status_command ;;
    logs) logs_command ;;
    logs-size) logs_size_command ;;
    clean-logs) clean_logs_command ;;
    edit) edit_command ;;
    uninstall) uninstall_command ;;
    template) template_command ;;
    guide) guide_command ;;
    menu) main_menu ;;
    update) update_command ;;
    check-update) update_command ;;
    help) show_help ;;
    --version|-v) echo "Caddy Selfsteal Management Script v$SCRIPT_VERSION" ;;
    --help|-h) show_help ;;
    "") main_menu ;;
    *) 
        echo -e "${RED}‚ùå Unknown command: $COMMAND${NC}"
        echo "Use '$APP_NAME --help' for usage information."
        exit 1
        ;;
esac
