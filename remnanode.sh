install_tblocker_command() {
    echo -e "\033[1;37müõ°Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tBlocker\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    local script_name="install-tblocker.sh"
    if [ -f "script/scripts-main/$script_name" ]; then
        bash "script/scripts-main/$script_name" install
    else
        echo -e "\033[38;5;244m–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $script_name —Å GitHub...\033[0m"
        bash <(curl -fsSL "https://raw.githubusercontent.com/Spakieone/Remna/main/$script_name") install
    fi
}

uninstall_tblocker_command() {
    echo -e "\033[1;37müóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ tBlocker\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    local script_name="install-tblocker.sh"
    if [ -f "script/scripts-main/$script_name" ]; then
        bash "script/scripts-main/$script_name" uninstall
    else
        echo -e "\033[38;5;244m–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $script_name —Å GitHub...\033[0m"
        bash <(curl -fsSL "https://raw.githubusercontent.com/Spakieone/Remna/main/$script_name") uninstall
    fi
}

# ===== –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UFW =====

ufw_enable_command() {
    echo -e "\033[1;37müî• –í–∫–ª—é—á–µ–Ω–∏–µ UFW\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        echo -e "\033[38;5;244m–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ UFW: sudo apt install ufw\033[0m"
        return 1
    fi
    
    if ufw status | grep -q "Status: active"; then
        echo -e "\033[1;33m‚ö†Ô∏è  UFW —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω\033[0m"
    else
        echo -e "\033[1;32m‚úÖ –í–∫–ª—é—á–∞–µ–º UFW...\033[0m"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º
        echo -e "\033[1;37müîì –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã:\033[0m"
        echo -e "\033[1;32m  ‚Ä¢ SSH (22)...\033[0m"
        sudo ufw allow 22/tcp
        
        echo -e "\033[1;32m  ‚Ä¢ HTTPS (443)...\033[0m"
        sudo ufw allow 443/tcp
        
        # –í–∫–ª—é—á–∞–µ–º UFW
        if sudo ufw --force enable; then
            echo -e "\033[1;32m‚úÖ UFW —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏ SSH –∏ HTTPS\033[0m"
        else
            echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ UFW\033[0m"
        fi
    fi
}

ufw_disable_command() {
    echo -e "\033[1;37m‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ UFW\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        return 1
    fi
    
    if ! ufw status | grep -q "Status: active"; then
        echo -e "\033[1;33m‚ö†Ô∏è  UFW —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\033[0m"
    else
        echo -e "\033[1;33m‚ö†Ô∏è  –í—ã–∫–ª—é—á–∞–µ–º UFW...\033[0m"
        if sudo ufw --force disable; then
            echo -e "\033[1;32m‚úÖ UFW —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω\033[0m"
        else
            echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ UFW\033[0m"
        fi
    fi
}

ufw_open_ports_command() {
    echo -e "\033[1;37müåê –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è IP\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        echo -e "\033[38;5;244m–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ UFW: sudo apt install ufw\033[0m"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–ø–∫–µ
    local node_port="6001"
    if [ -f "$ENV_FILE" ]; then
        node_port=$(grep "APP_PORT=" "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo "6001")
    fi
    
    echo -e "\033[1;37m–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:\033[0m"
    echo -e "\033[38;5;244m–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç RemnaNode: $node_port\033[0m"
    echo
    echo -e "\033[1;37m–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:\033[0m"
    echo -e "   \033[38;5;15m1)\033[0m \033[1;32m9100\033[0m - Node Exporter (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"
    echo -e "   \033[38;5;15m2)\033[0m \033[1;32m$node_port\033[0m - RemnaNode (—Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç)"
    echo -e "   \033[38;5;15m3)\033[0m \033[1;32m22\033[0m - SSH"
    echo -e "   \033[38;5;15m4)\033[0m \033[1;32m443\033[0m - HTTPS"
    echo -e "   \033[38;5;15m5)\033[0m \033[1;32m–î—Ä—É–≥–æ–π –ø–æ—Ä—Ç\033[0m - –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
    echo
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-5]: " port_choice
    
    local selected_port=""
    case "$port_choice" in
        1) selected_port="9100" ;;
        2) selected_port="$node_port" ;;
        3) selected_port="22" ;;
        4) selected_port="443" ;;
        5) 
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: " selected_port
            if ! [[ "$selected_port" =~ ^[0-9]+$ ]] || [ "$selected_port" -lt 1 ] || [ "$selected_port" -gt 65535 ]; then
                echo -e "\033[1;31m‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535\033[0m"
                return 1
            fi
            ;;
        *)
            echo -e "\033[1;31m‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\033[0m"
            return 1
            ;;
    esac
    
    echo
    echo -e "\033[1;37m–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ $selected_port:\033[0m"
    echo -e "\033[38;5;244m–ü—Ä–∏–º–µ—Ä: 192.168.1.100 –∏–ª–∏ 10.0.0.0/8\033[0m"
    read -p "IP –∞–¥—Ä–µ—Å: " target_ip
    
    if [ -z "$target_ip" ]; then
        echo -e "\033[1;31m‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\033[0m"
        return 1
    fi
    
    echo
    echo -e "\033[1;37m–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç $selected_port –¥–ª—è $target_ip:\033[0m"
    
    if sudo ufw allow from "$target_ip" to any port "$selected_port"; then
        echo -e "\033[1;32m‚úÖ –ü–æ—Ä—Ç $selected_port —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è $target_ip\033[0m"
    else
        echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ä—Ç–∞ $selected_port\033[0m"
    fi
}

ufw_reset_command() {
    echo -e "\033[1;37müóëÔ∏è  –°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª UFW\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        return 1
    fi
    
    echo -e "\033[1;33m‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –ø—Ä–∞–≤–∏–ª–∞ UFW!\033[0m"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "\033[1;32m‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ UFW...\033[0m"
        if sudo ufw --force reset; then
            echo -e "\033[1;32m‚úÖ –ü—Ä–∞–≤–∏–ª–∞ UFW —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã\033[0m"
        else
            echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–∞–≤–∏–ª UFW\033[0m"
        fi
    else
        echo -e "\033[1;33m‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\033[0m"
    fi
}

ufw_show_rules_command() {
    echo -e "\033[1;37müìã –ü—Ä–∞–≤–∏–ª–∞ UFW\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        return 1
    fi
    
    echo -e "\033[1;37m–°—Ç–∞—Ç—É—Å UFW:\033[0m"
    sudo ufw status verbose
}

ufw_remove_remnanode_rules_command() {
    echo -e "\033[1;37müóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª UFW\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if ! command -v ufw >/dev/null 2>&1; then
        echo -e "\033[1;31m‚ùå UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local node_port="6001"
    if [ -f "$ENV_FILE" ]; then
        node_port=$(grep "APP_PORT=" "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo "6001")
    fi
    
    echo -e "\033[1;37m–£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ $node_port...\033[0m"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è RemnaNode –ø–æ—Ä—Ç–∞
    sudo ufw delete allow "$node_port" 2>/dev/null || true
    sudo ufw delete deny "$node_port" 2>/dev/null || true
    
    echo -e "\033[1;32m‚úÖ –ü—Ä–∞–≤–∏–ª–∞ UFW —É–¥–∞–ª–µ–Ω—ã\033[0m"
    echo -e "\033[38;5;244m–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\033[0m"
    sudo ufw status numbered
}

node_exporter_menu_command() { :; }


#!/usr/bin/env bash
# Version: 3.2.2
set -e
SCRIPT_VERSION="3.2.2"

# Handle @ prefix for consistency with other scripts
if [ $# -gt 0 ] && [ "$1" = "@" ]; then
    shift  
fi

# Parse command line arguments
COMMAND=""
if [ $# -gt 0 ]; then
    COMMAND="$1"
    shift
fi

while [[ $# -gt 0 ]]; do
    key="$1"
    
    case $key in
        --name)
            # –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ 'remnanode'
            echo "‚ö†Ô∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä --name –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è 'remnanode'."
            shift # past argument
            shift # past value
        ;;
        --dev)
            if [[ "$COMMAND" == "install" ]]; then
                USE_DEV_BRANCH="true"
            else
                echo "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä --dev —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–∞–Ω–¥–æ–π 'install'."
                exit 1
            fi
            shift # past argument
        ;;
        --help|-h)
            show_command_help "$COMMAND"
            exit 0
        ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $key"
            exit 1
        ;;
    esac
done

# Fetch IP address from ipinfo.io API
NODE_IP=$(curl -s -4 ifconfig.io)

# If the IPv4 retrieval is empty, attempt to retrieve the IPv6 address
if [ -z "$NODE_IP" ]; then
    NODE_IP=$(curl -s -6 ifconfig.io)
fi

APP_NAME="remnanode"

INSTALL_DIR="/opt"
APP_DIR="$INSTALL_DIR/$APP_NAME"
DATA_DIR="/var/lib/$APP_NAME"
COMPOSE_FILE="$APP_DIR/docker-compose.yml"
ENV_FILE="$APP_DIR/.env"
XRAY_FILE="$DATA_DIR/xray"
GEOIP_FILE="$DATA_DIR/geoip.dat"
GEOSITE_FILE="$DATA_DIR/geosite.dat"
SCRIPT_URL="https://raw.githubusercontent.com/Spakieone/Remna/main/remnanode.sh"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

colorized_echo() {
    local color=$1
    local text=$2
    local style=${3:-0}  # Default style is normal

    case $color in
        "red") printf "\e[${style};91m${text}\e[0m\n" ;;
        "green") printf "\e[${style};92m${text}\e[0m\n" ;;
        "yellow") printf "\e[${style};93m${text}\e[0m\n" ;;
        "blue") printf "\e[${style};94m${text}\e[0m\n" ;;
        "magenta") printf "\e[${style};95m${text}\e[0m\n" ;;
        "cyan") printf "\e[${style};96m${text}\e[0m\n" ;;
        *) echo "${text}" ;;
    esac
}

check_running_as_root() {
    if [ "$(id -u)" != "0" ]; then
        colorized_echo red "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ—Ç root."
        exit 1
    fi
}


check_system_requirements() {
    local errors=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (–º–∏–Ω–∏–º—É–º 1GB)
    local available_space=$(df / | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt 1048576 ]; then  # 1GB –≤ KB
        colorized_echo red "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1GB."
        errors=$((errors + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAM (–º–∏–Ω–∏–º—É–º 512MB)
    local available_ram=$(free -m | awk 'NR==2{print $7}')
    if [ "$available_ram" -lt 256 ]; then
        colorized_echo yellow "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π RAM (${available_ram}MB). –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–∞–¥–∞—Ç—å."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    if ! identify_the_operating_system_and_architecture 2>/dev/null; then
        colorized_echo red "–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã."
        errors=$((errors + 1))
    fi
    
    return $errors
}

detect_os() {
    if [ -f /etc/lsb-release ]; then
        OS=$(lsb_release -si)
    elif [ -f /etc/os-release ]; then
        OS=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"')
        if [[ "$OS" == "Amazon Linux" ]]; then
            OS="Amazon"
        fi
    elif [ -f /etc/redhat-release ]; then
        OS=$(cat /etc/redhat-release | awk '{print $1}')
    elif [ -f /etc/arch-release ]; then
        OS="Arch"
    else
        colorized_echo red "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
        exit 1
    fi
}

detect_and_update_package_manager() {
    colorized_echo blue "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤"
    if [[ "$OS" == "Ubuntu"* ]] || [[ "$OS" == "Debian"* ]]; then
        PKG_MANAGER="apt-get"
        $PKG_MANAGER update -qq >/dev/null 2>&1
    elif [[ "$OS" == "CentOS"* ]] || [[ "$OS" == "AlmaLinux"* ]] || [[ "$OS" == "Amazon"* ]]; then
        PKG_MANAGER="yum"
        $PKG_MANAGER update -y -q >/dev/null 2>&1
        if [[ "$OS" != "Amazon" ]]; then
            $PKG_MANAGER install -y -q epel-release >/dev/null 2>&1
        fi
    elif [[ "$OS" == "Fedora"* ]]; then
        PKG_MANAGER="dnf"
        $PKG_MANAGER update -q -y >/dev/null 2>&1
    elif [[ "$OS" == "Arch"* ]]; then
        PKG_MANAGER="pacman"
        $PKG_MANAGER -Sy --noconfirm --quiet >/dev/null 2>&1
    elif [[ "$OS" == "openSUSE"* ]]; then
        PKG_MANAGER="zypper"
        $PKG_MANAGER refresh --quiet >/dev/null 2>&1
    else
        colorized_echo red "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
        exit 1
    fi
}

detect_compose() {
    if docker compose >/dev/null 2>&1; then
        COMPOSE='docker compose'
    elif docker-compose >/dev/null 2>&1; then
        COMPOSE='docker-compose'
    else
        if [[ "$OS" == "Amazon"* ]]; then
            colorized_echo blue "–ü–ª–∞–≥–∏–Ω Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
            mkdir -p /usr/libexec/docker/cli-plugins
            curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/libexec/docker/cli-plugins/docker-compose >/dev/null 2>&1
            chmod +x /usr/libexec/docker/cli-plugins/docker-compose
            if docker compose >/dev/null 2>&1; then
                COMPOSE='docker compose'
                colorized_echo green "–ü–ª–∞–≥–∏–Ω Docker Compose —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            else
                colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω Docker Compose. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                exit 1
            fi
        else
            colorized_echo red "docker compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    fi
}

install_package() {
    if [ -z "$PKG_MANAGER" ]; then
        detect_and_update_package_manager
    fi

    PACKAGE=$1
    colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $PACKAGE"
    if [[ "$OS" == "Ubuntu"* ]] || [[ "$OS" == "Debian"* ]]; then
        $PKG_MANAGER -y -qq install "$PACKAGE" >/dev/null 2>&1
    elif [[ "$OS" == "CentOS"* ]] || [[ "$OS" == "AlmaLinux"* ]] || [[ "$OS" == "Amazon"* ]]; then
        $PKG_MANAGER install -y -q "$PACKAGE" >/dev/null 2>&1
    elif [[ "$OS" == "Fedora"* ]]; then
        $PKG_MANAGER install -y -q "$PACKAGE" >/dev/null 2>&1
    elif [[ "$OS" == "Arch"* ]]; then
        $PKG_MANAGER -S --noconfirm --quiet "$PACKAGE" >/dev/null 2>&1
    elif [[ "$OS" == "openSUSE"* ]]; then
        $PKG_MANAGER --quiet install -y "$PACKAGE" >/dev/null 2>&1
    else
        colorized_echo red "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
        exit 1
    fi
}

install_docker() {
    colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    if [[ "$OS" == "Amazon"* ]]; then
        amazon-linux-extras enable docker >/dev/null 2>&1
        yum install -y docker >/dev/null 2>&1
        systemctl start docker
        systemctl enable docker
        colorized_echo green "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Amazon Linux"
    else
        curl -fsSL https://get.docker.com | sh
        colorized_echo green "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

install_remnanode_script() {
    colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ remnanode"
    TARGET_PATH="/usr/local/bin/$APP_NAME"
    curl -sSL $SCRIPT_URL -o $TARGET_PATH
    chmod 755 $TARGET_PATH
    colorized_echo green "–°–∫—Ä–∏–ø—Ç Remnanode —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $TARGET_PATH"
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
validate_port() {
    local port="$1"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
    if [[ ! "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –Ω–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π
    if [ "$port" -lt 1024 ] && [ "$(id -u)" != "0" ]; then
        colorized_echo yellow "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ—Ä—Ç $port —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π root"
    fi
    
    return 0
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ —Å fallback
get_occupied_ports() {
    local ports=""
    
    if command -v ss &>/dev/null; then
        ports=$(ss -tuln 2>/dev/null | awk 'NR>1 {print $5}' | grep -Eo '[0-9]+$' | sort -n | uniq)
    elif command -v netstat &>/dev/null; then
        ports=$(netstat -tuln 2>/dev/null | awk 'NR>2 {print $4}' | grep -Eo '[0-9]+$' | sort -n | uniq)
    else
        colorized_echo yellow "–ù–µ –Ω–∞–π–¥–µ–Ω—ã ss –∏–ª–∏ netstat. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º net-tools..."
        detect_os
        if install_package net-tools; then
            if command -v netstat &>/dev/null; then
                ports=$(netstat -tuln 2>/dev/null | awk 'NR>2 {print $4}' | grep -Eo '[0-9]+$' | sort -n | uniq)
            fi
        else
            colorized_echo yellow "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å net-tools. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤."
            return 1
        fi
    fi
    
    OCCUPIED_PORTS="$ports"
    return 0
}
is_port_occupied() {
    if echo "$OCCUPIED_PORTS" | grep -q -w "$1"; then
        return 0
    else
        return 1
    fi
}

install_latest_xray_core() {
    colorized_echo blue "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Xray-core..."
    identify_the_operating_system_and_architecture
    mkdir -p "$DATA_DIR"
    cd "$DATA_DIR"
    
    latest_release=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | grep -oP '"tag_name": "\K(.*?)(?=")')
    if [ -z "$latest_release" ]; then
        colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Xray-core."
        exit 1
    fi
    
    if ! dpkg -s unzip >/dev/null 2>&1; then
        colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ unzip..."
        detect_os
        install_package unzip
    fi
    
    xray_filename="Xray-linux-$ARCH.zip"
    xray_download_url="https://github.com/XTLS/Xray-core/releases/download/${latest_release}/${xray_filename}"
    
    colorized_echo blue "–ó–∞–≥—Ä—É–∑–∫–∞ Xray-core –≤–µ—Ä—Å–∏–∏ ${latest_release}..."
    colorized_echo yellow "URL: ${xray_download_url}"
    wget "${xray_download_url}" -q --show-progress
    if [ $? -ne 0 ]; then
        colorized_echo red "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Xray-core."
        exit 1
    fi
    colorized_echo green "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    colorized_echo blue "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Xray-core..."
    unzip -o "${xray_filename}" -d "$DATA_DIR" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        colorized_echo red "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Xray-core."
        exit 1
    fi
    colorized_echo green "‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

    rm "${xray_filename}"
    chmod +x "$XRAY_FILE"
    
    # Check what files were extracted
    colorized_echo blue "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    if [ -f "$XRAY_FILE" ]; then
        colorized_echo green "  ‚úÖ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª xray"
    fi
    if [ -f "$GEOIP_FILE" ]; then
        colorized_echo green "  ‚úÖ geoip.dat"
    fi
    if [ -f "$GEOSITE_FILE" ]; then
        colorized_echo green "  ‚úÖ geosite.dat"
    fi
    
    colorized_echo green "–ü–æ—Å–ª–µ–¥–Ω–∏–π Xray-core (${latest_release}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $XRAY_FILE"
}

setup_log_rotation() {
    check_running_as_root
    
    # Check if the directory exists
    if [ ! -d "$DATA_DIR" ]; then
        colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $DATA_DIR"
        mkdir -p "$DATA_DIR"
    else
        colorized_echo green "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $DATA_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # Check if logrotate is installed
    if ! command -v logrotate &> /dev/null; then
        colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ logrotate"
        detect_os
        install_package logrotate
    else
        colorized_echo green "Logrotate —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # Check if logrotate config already exists
    LOGROTATE_CONFIG="/etc/logrotate.d/remnanode"
    if [ -f "$LOGROTATE_CONFIG" ]; then
        colorized_echo yellow "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è logrotate —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ $LOGROTATE_CONFIG"
        read -p "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—ë? (y/n): " -r overwrite
        if [[ ! $overwrite =~ ^[Yy]$ ]]; then
            colorized_echo yellow "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é logrotate"
            return
        fi
    fi
    
    # Create logrotate configuration
    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ logrotate –≤ $LOGROTATE_CONFIG"
    cat > "$LOGROTATE_CONFIG" <<EOL
$DATA_DIR/*.log {
    size 50M
    rotate 5
    compress
    missingok
    notifempty
    copytruncate
}
EOL

    chmod 644 "$LOGROTATE_CONFIG"
    
    # Test logrotate configuration
    colorized_echo blue "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ logrotate"
    if logrotate -d "$LOGROTATE_CONFIG" &> /dev/null; then
        colorized_echo green "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ logrotate –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
        
        # Ask if user wants to run logrotate now
        read -p "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å logrotate —Å–µ–π—á–∞—Å? (y/n): " -r run_now
        if [[ $run_now =~ ^[Yy]$ ]]; then
            colorized_echo blue "–ó–∞–ø—É—Å–∫ logrotate"
            if logrotate -vf "$LOGROTATE_CONFIG"; then
                colorized_echo green "Logrotate –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                colorized_echo red "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ logrotate"
            fi
        fi
    else
        colorized_echo red "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ logrotate –Ω–µ –ø—Ä–æ—à–µ–ª"
        logrotate -d "$LOGROTATE_CONFIG"
    fi
    
    # Update docker-compose.yml to mount logs directory
    if [ -f "$COMPOSE_FILE" ]; then
        colorized_echo blue "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.yml –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤"
        

        colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ docker-compose.yml..."
        backup_file=$(create_backup "$COMPOSE_FILE")
        if [ $? -eq 0 ]; then
            colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
        else
            colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
            return
        fi
        

        local service_indent=$(get_service_property_indentation "$COMPOSE_FILE")
        local indent_type=""
        if [[ "$service_indent" =~ $'\t' ]]; then
            indent_type=$'\t'
        else
            indent_type="  "
        fi
        local volume_item_indent="${service_indent}${indent_type}"
        

        local escaped_service_indent=$(escape_for_sed "$service_indent")
        local escaped_volume_item_indent=$(escape_for_sed "$volume_item_indent")
        

        if grep -q "^${escaped_service_indent}volumes:" "$COMPOSE_FILE"; then
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—Å—Ç—É–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ '-' –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏ volumes
            local detected_item_indent=""
            detected_item_indent=$(awk 'found_volumes && match($0,/^[[:space:]]*-[[:space:]]/){ m=substr($0,1,RLENGTH-2); print m; exit } /^[[:space:]]*volumes:[[:space:]]*$/ { found_volumes=1 }' "$COMPOSE_FILE")
            if [ -n "$detected_item_indent" ]; then
                volume_item_indent="$detected_item_indent"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–º –ª–æ–≥–æ–≤
            if ! grep -q "/var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"; then
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ–∫—Ü–∏–∏ volumes –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                local last_volume_line=$(awk '/^[[:space:]]*volumes:[[:space:]]*$/ { found=1; next } found && /^[[:space:]]*-[[:space:]]/ { last_line=NR } found && /^[[:space:]]*[a-zA-Z]/ && !/^[[:space:]]*-/ { exit } END { print last_line }' "$COMPOSE_FILE")
                if [ -n "$last_volume_line" ]; then
                    sed -i "${last_volume_line}a\\${volume_item_indent}- /var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"
                else
                    sed -i "/^${escaped_service_indent}volumes:/a\\${volume_item_indent}- /var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"
                fi
                colorized_echo green "–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–º –ª–æ–≥–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é volumes"
            else
                colorized_echo yellow "–¢–æ–º –ª–æ–≥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ–∫—Ü–∏–∏ volumes"
            fi

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ —Å–µ–∫—Ü–∏–∏ volumes (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
            normalize_volumes_indentation "$COMPOSE_FILE"
        elif grep -q "^${escaped_service_indent}# volumes:" "$COMPOSE_FILE"; then
            sed -i "s|^${escaped_service_indent}# volumes:|${service_indent}volumes:|g" "$COMPOSE_FILE"
            
            if grep -q "^${escaped_volume_item_indent}#.*/var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"; then
                sed -i "s|^${escaped_volume_item_indent}#.*/var/log/remnanode:/var/log/remnanode|${volume_item_indent}- /var/log/remnanode:/var/log/remnanode|g" "$COMPOSE_FILE"
                colorized_echo green "–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ–∫—Ü–∏—è volumes –∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–º–∞ –ª–æ–≥–æ–≤"
            else
                sed -i "/^${escaped_service_indent}volumes:/a\\${volume_item_indent}- /var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"
                colorized_echo green "–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ–∫—Ü–∏—è volumes –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–º–∞ –ª–æ–≥–æ–≤"
            fi
        else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∫—Ü–∏—è volumes –≥–¥–µ-—Ç–æ –≤ —Ñ–∞–π–ª–µ
            if grep -q "^[[:space:]]*volumes:" "$COMPOSE_FILE"; then
                # –ï—Å–ª–∏ volumes –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ
                colorized_echo yellow "–ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è volumes, –Ω–æ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º..."
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ volumes –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
                sed -i '/^[[:space:]]*volumes:/,/^[[:space:]]*[a-zA-Z]/ { /^[[:space:]]*[a-zA-Z]/!d; }' "$COMPOSE_FILE"
            fi
            sed -i "/^${escaped_service_indent}restart: always/a\\${service_indent}volumes:\\n${volume_item_indent}- /var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE"
            colorized_echo green "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è volumes —Å —Ç–æ–º–æ–º –ª–æ–≥–æ–≤"
        fi
        

        colorized_echo blue "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml..."
        if validate_compose_file "$COMPOSE_FILE"; then
            colorized_echo green "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
            cleanup_old_backups "$COMPOSE_FILE"

            if is_remnanode_up; then
                read -p "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å RemnaNode –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? (y/n): " -r restart_now
                if [[ $restart_now =~ ^[Yy]$ ]]; then
                    colorized_echo blue "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RemnaNode"
                    if $APP_NAME restart -n; then
                        colorized_echo green "RemnaNode —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                    else
                        colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å RemnaNode"
                    fi
                else
                    colorized_echo yellow "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å RemnaNode –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                fi
            fi
        else
            colorized_echo red "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –Ω–µ –ø—Ä–æ—à–ª–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
            if restore_backup "$backup_file" "$COMPOSE_FILE"; then
                colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            else
                colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é!"
            fi
            return
        fi
    else
        colorized_echo yellow "–§–∞–π–ª Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ."
    fi
    
    colorized_echo green "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

install_remnanode() {

    if ! check_system_requirements; then
        colorized_echo red "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ—à–ª–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
        exit 1
    fi

    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $APP_DIR"
    mkdir -p "$APP_DIR"

    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $DATA_DIR"
    mkdir -p "$DATA_DIR"

    # Create log directory for tBlocker compatibility
    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ /var/log/remnanode"
    mkdir -p /var/log/remnanode

    echo
    echo -e "\033[1;37m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo -e "\033[1;36müìã –í—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose\033[0m"
    echo -e "\033[38;5;8m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo
    colorized_echo yellow "–í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ docker-compose.yml –∏–∑ Remnawave-Panel"
    colorized_echo blue "–ù–∞–∂–º–∏—Ç–µ ENTER –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—Å—Ç–∞–≤–∫—É:"
    echo
    
    COMPOSE_CONTENT=""
    line_count=0
    while IFS= read -r line; do
        if [[ -z "$line" ]] && [[ $line_count -gt 0 ]]; then
            break
        fi
        if [[ -n "$line" ]]; then
            COMPOSE_CONTENT="$COMPOSE_CONTENT$line"$'\n'
            ((line_count++))
        fi
    done

    if [[ -z "$COMPOSE_CONTENT" ]]; then
        colorized_echo red "‚ùå –û—à–∏–±–∫–∞: docker-compose.yml –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
        exit 1
    fi

    # Save original compose file
    echo "$COMPOSE_CONTENT" > "$COMPOSE_FILE.tmp"
    
    # Add log volume to docker-compose.yml
    colorized_echo blue "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ volume –¥–ª—è –ª–æ–≥–æ–≤ –≤ docker-compose.yml..."
    
    # Check if volumes section exists
    if grep -q "^[[:space:]]*volumes:" "$COMPOSE_FILE.tmp"; then
        # Volumes section exists - check if log volume already present
        if grep -q "/var/log/remnanode:/var/log/remnanode" "$COMPOSE_FILE.tmp"; then
            colorized_echo green "‚úÖ Volume –¥–ª—è –ª–æ–≥–æ–≤ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            mv "$COMPOSE_FILE.tmp" "$COMPOSE_FILE"
        else
            # Add log volume to existing volumes section
            awk '
                /^[[:space:]]*volumes:/ {
                    print $0
                    # Detect indentation of the volumes line
                    match($0, /^[[:space:]]*/)
                    base_indent = substr($0, RSTART, RLENGTH)
                    # Detect if using tabs or spaces for items
                    getline next_line
                    if (match(next_line, /^[[:space:]]*-/)) {
                        match(next_line, /^[[:space:]]*/)
                        item_indent = substr(next_line, RSTART, RLENGTH)
                        print item_indent "- /var/log/remnanode:/var/log/remnanode"
                        print next_line
                    } else {
                        print base_indent "  - /var/log/remnanode:/var/log/remnanode"
                        print next_line
                    }
                    next
                }
                { print }
            ' "$COMPOSE_FILE.tmp" > "$COMPOSE_FILE"
            rm "$COMPOSE_FILE.tmp"
            colorized_echo green "‚úÖ Volume –¥–ª—è –ª–æ–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é volumes"
        fi
    else
        # No volumes section - add it
        # Detect service indentation
        service_indent=$(grep -m1 "^[[:space:]]*container_name:" "$COMPOSE_FILE.tmp" | sed 's/container_name:.*//' || echo "    ")
        
        # Add volumes section before the end
        awk -v indent="$service_indent" '
            # Track if we are inside remnanode service
            /services:/ { in_services=1 }
            /remnanode:/ && in_services { in_remnanode=1 }
            
            # If we find next service or end of file, add volumes before it
            /^[[:space:]]*[a-zA-Z_-]+:/ && in_remnanode && !/remnanode:/ {
                print indent "volumes:"
                print indent "  - /var/log/remnanode:/var/log/remnanode"
                in_remnanode=0
            }
            
            { print }
            
            # Add at end if still in remnanode service
            END {
                if (in_remnanode) {
                    print indent "volumes:"
                    print indent "  - /var/log/remnanode:/var/log/remnanode"
                }
            }
        ' "$COMPOSE_FILE.tmp" > "$COMPOSE_FILE"
        rm "$COMPOSE_FILE.tmp"
        colorized_echo green "‚úÖ –°–µ–∫—Ü–∏—è volumes —Å –ª–æ–≥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
    fi

    colorized_echo green "–§–∞–π–ª Docker Compose —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $COMPOSE_FILE"
    
    # Show the final compose file
    echo
    echo -e "\033[1;37m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo -e "\033[1;36müìÑ –ò—Ç–æ–≥–æ–≤—ã–π docker-compose.yml:\033[0m"
    echo -e "\033[38;5;8m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo
    cat "$COMPOSE_FILE"
    echo
    echo -e "\033[38;5;8m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"

    # Ask about installing Xray-core
    echo
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Xray-core? (y/n): " -r install_xray
    INSTALL_XRAY=false
    if [[ "$install_xray" =~ ^[Yy]$ ]]; then
        INSTALL_XRAY=true
        install_latest_xray_core
    fi

    # Ask about installing tBlocker
    echo
    echo -e "\033[1;37m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo -e "\033[1;36müõ°Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tBlocker\033[0m"
    echo -e "\033[38;5;8m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo
    echo -e "\033[38;5;250mtBlocker - —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ iptables\033[0m"
    echo -e "\033[38;5;250m–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—Ä—Ä–µ–Ω—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\033[0m"
    echo
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å tBlocker? (y/n): " -r install_tb
    INSTALL_TB=false
    if [[ "$install_tb" =~ ^[Yy]$ ]]; then
        INSTALL_TB=true
    fi

    # Optionally install tBlocker right away
    if [ "$INSTALL_TB" == "true" ]; then
        echo
        colorized_echo blue "üõ°Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tBlocker –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"
        install_tblocker_command
    fi

    echo
    echo -e "\033[1;32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo -e "\033[1;32m‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ RemnaNode –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\033[0m"
    echo -e "\033[1;32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\033[0m"
    echo
    echo -e "\033[38;5;250m–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \033[1;37m$APP_DIR\033[0m"
    echo -e "\033[38;5;250m–õ–æ–≥–∏: \033[1;37m/var/log/remnanode\033[0m"
    echo -e "\033[38;5;250mDocker Compose: \033[1;37m$COMPOSE_FILE\033[0m"
    echo
    echo -e "\033[1;37m–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\033[0m"
    echo -e "\033[1;36m  remnanode up\033[0m"
    echo
}

uninstall_remnanode_script() {
    if [ -f "/usr/local/bin/$APP_NAME" ]; then
        colorized_echo yellow "Removing remnanode script"
        rm "/usr/local/bin/$APP_NAME"
    fi
}

uninstall_remnanode() {
    if [ -d "$APP_DIR" ]; then
        colorized_echo yellow "Removing directory: $APP_DIR"
        rm -r "$APP_DIR"
    fi
}

uninstall_remnanode_docker_images() {
    images=$(docker images | grep remnawave/node | awk '{print $3}')
    if [ -n "$images" ]; then
        colorized_echo yellow "Removing Docker images of remnanode"
        for image in $images; do
            if docker rmi "$image" >/dev/null 2>&1; then
                colorized_echo yellow "Image $image removed"
            fi
        done
    fi
}

uninstall_remnanode_data_files() {
    if [ -d "$DATA_DIR" ]; then
        colorized_echo yellow "Removing directory: $DATA_DIR"
        rm -r "$DATA_DIR"
    fi
}

up_remnanode() {
    $COMPOSE -f $COMPOSE_FILE -p "$APP_NAME" up -d --remove-orphans
}

down_remnanode() {
    $COMPOSE -f $COMPOSE_FILE -p "$APP_NAME" down
}

show_remnanode_logs() {
    $COMPOSE -f $COMPOSE_FILE -p "$APP_NAME" logs
}

follow_remnanode_logs() {
    $COMPOSE -f $COMPOSE_FILE -p "$APP_NAME" logs -f
}

update_remnanode_script() {
    colorized_echo blue "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ remnanode"
    curl -sSL $SCRIPT_URL | install -m 755 /dev/stdin /usr/local/bin/$APP_NAME
    colorized_echo green "–°–∫—Ä–∏–ø—Ç Remnanode —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
}

update_remnanode() {
    $COMPOSE -f $COMPOSE_FILE -p "$APP_NAME" pull
}

is_remnanode_installed() {
    if [ -d "$APP_DIR" ]; then
        return 0
    else
        return 1
    fi
}

is_remnanode_up() {
    if ! is_remnanode_installed; then
        return 1
    fi
    
    detect_compose
    if [ -z "$($COMPOSE -f $COMPOSE_FILE ps -q -a)" ]; then
        return 1
    else
        return 0
    fi
}

install_command() {
    check_running_as_root
    if is_remnanode_installed; then
        colorized_echo red "RemnaNode —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $APP_DIR"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n) "
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            colorized_echo red "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            exit 1
        fi
    fi
    detect_os
    if ! command -v curl >/dev/null 2>&1; then
        install_package curl
    fi
    if ! command -v docker >/dev/null 2>&1; then
        install_docker
    fi

    detect_compose
    install_remnanode_script
    install_remnanode
    up_remnanode
    
    # Extract NODE_PORT from docker-compose.yml
    NODE_PORT=$(grep -i "NODE_PORT=" "$COMPOSE_FILE" | sed 's/.*NODE_PORT=//' | sed 's/"//g' | head -1)
    if [ -z "$NODE_PORT" ]; then
        NODE_PORT="–Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    fi
    
    follow_remnanode_logs

    # final message
    clear
    echo
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
    echo -e "\033[1;37müéâ RemnaNode —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
    echo
    
    echo -e "\033[1;37müåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\033[0m"
    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s\033[0m\n" "IP –∞–¥—Ä–µ—Å:" "$NODE_IP"
    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s\033[0m\n" "–ü–æ—Ä—Ç:" "$NODE_PORT"
    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s:%s\033[0m\n" "–ü–æ–ª–Ω—ã–π URL:" "$NODE_IP" "$NODE_PORT"
    echo
    
    echo -e "\033[1;37müìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\033[0m"
    echo -e "   \033[38;5;250m1.\033[0m –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP –∏ –ø–æ—Ä—Ç –≤—ã—à–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Remnawave Panel"
    echo -e "   \033[38;5;250m2.\033[0m –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤: \033[38;5;15msudo $APP_NAME setup-logs\033[0m"
    
    if [ "$INSTALL_XRAY" == "true" ]; then
        echo -e "   \033[38;5;250m3.\033[0m \033[1;37mXray-core —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤! ‚úÖ\033[0m"
    else
        echo -e "   \033[38;5;250m3.\033[0m –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xray-core: \033[38;5;15msudo $APP_NAME core-update\033[0m"
    fi
    
    if [ "$INSTALL_TB" == "true" ]; then
        echo -e "   \033[38;5;250m4.\033[0m \033[1;37mtBlocker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ\033[0m"
    fi
    
    echo -e "   \033[38;5;250m5.\033[0m –ù–∞—Å—Ç—Ä–æ–π—Ç–µ UFW: \033[38;5;15msudo ufw allow from \033[38;5;244mPANEL_IP\033[38;5;15m to any port $NODE_PORT\033[0m"
    echo -e "      \033[38;5;8m(–í–∫–ª—é—á–∏—Ç—å UFW: \033[38;5;15msudo ufw enable\033[38;5;8m)\033[0m"
    echo
    
    echo -e "\033[1;37müõ†Ô∏è  –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\033[0m"
    printf "   \033[38;5;15m%-15s\033[0m %s\n" "status" "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    printf "   \033[38;5;15m%-15s\033[0m %s\n" "logs" "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    printf "   \033[38;5;15m%-15s\033[0m %s\n" "restart" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    if [ "$INSTALL_XRAY" == "true" ]; then
        printf "   \033[38;5;15m%-15s\033[0m %s\n" "xray_log_out" "üì§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ Xray"
    fi
    echo
    
    echo -e "\033[1;37müìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:\033[0m"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" "$APP_DIR"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–î–∞–Ω–Ω—ã–µ:" "$DATA_DIR"
    if [ "$INSTALL_XRAY" == "true" ]; then
        printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–ë–∏–Ω–∞—Ä–Ω–∏–∫ Xray:" "$XRAY_FILE"
    fi
    echo
    
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
    echo -e "\033[38;5;8müí° –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: \033[38;5;15msudo $APP_NAME\033[0m"
    echo -e "\033[38;5;8müìö –ü—Ä–æ–µ–∫—Ç: \033[38;5;250mhttps://gig.ovh\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
}

uninstall_command() {
    check_running_as_root
    if ! is_remnanode_installed; then
        colorized_echo red "RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    read -p "Do you really want to uninstall Remnanode? (y/n) "
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        colorized_echo red "Aborted"
        exit 1
    fi
    
    detect_compose
    if is_remnanode_up; then
        down_remnanode
    fi
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã RemnaNode
    colorized_echo yellow "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ RemnaNode..."
    if docker ps -aq --filter "name=remnanode" | grep -q .; then
        docker rm -f remnanode 2>/dev/null || true
        colorized_echo green "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã RemnaNode —É–¥–∞–ª–µ–Ω—ã"
    fi
    
    uninstall_remnanode_script
    uninstall_remnanode
    uninstall_remnanode_docker_images
    
    read -p "Do you want to remove Remnanode data files too ($DATA_DIR)? (y/n) "
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        colorized_echo green "Remnanode —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    else
        uninstall_remnanode_data_files
        colorized_echo green "Remnanode —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    fi
}

install_script_command() {
    check_running_as_root
    colorized_echo blue "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ RemnaNode –≥–ª–æ–±–∞–ª—å–Ω–æ"
    install_remnanode_script
    colorized_echo green "‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    colorized_echo white "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å '$APP_NAME' –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞"
}

uninstall_script_command() {
    check_running_as_root
    if [ ! -f "/usr/local/bin/$APP_NAME" ]; then
        colorized_echo red "‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /usr/local/bin/$APP_NAME"
        exit 1
    fi
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç? (y/n): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        colorized_echo yellow "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    colorized_echo blue "–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ RemnaNode"
    uninstall_remnanode_script
    colorized_echo green "‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
}

up_command() {
    help() {
        colorized_echo red "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: remnanode up [–æ–ø—Ü–∏–∏]"
        echo "OPTIONS:"
        echo "  -h, --help        display this help message"
        echo "  -n, --no-logs     do not follow logs after starting"
    }
    
    local no_logs=false
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -n|--no-logs) no_logs=true ;;
            -h|--help) help; exit 0 ;;
            *) echo "Error: Invalid option: $1" >&2; help; exit 0 ;;
        esac
        shift
    done
    
    if ! is_remnanode_installed; then
        colorized_echo red "RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    detect_compose
    
    if is_remnanode_up; then
        colorized_echo red "RemnaNode —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        exit 1
    fi
    
    up_remnanode
    if [ "$no_logs" = false ]; then
        follow_remnanode_logs
    fi
}

down_command() {
    if ! is_remnanode_installed; then
        colorized_echo red "RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    detect_compose
    
    if ! is_remnanode_up; then
        colorized_echo red "RemnaNode —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    down_remnanode
}

restart_command() {
    help() {
        colorized_echo red "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: remnanode restart [–æ–ø—Ü–∏–∏]"
        echo "OPTIONS:"
        echo "  -h, --help        display this help message"
        echo "  -n, --no-logs     do not follow logs after starting"
    }
    
    local no_logs=false
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -n|--no-logs) no_logs=true ;;
            -h|--help) help; exit 0 ;;
            *) echo "Error: Invalid option: $1" >&2; help; exit 0 ;;
        esac
        shift
    done
    
    if ! is_remnanode_installed; then
        colorized_echo red "RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    detect_compose
    
    down_remnanode
    up_remnanode
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–ª–∞–≥–∞ --no-logs
    if [ "$no_logs" = false ]; then
        follow_remnanode_logs
    fi
}

status_command() {
    echo -e "\033[1;37müìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ RemnaNode:\033[0m"
    echo
    
    if ! is_remnanode_installed; then
        printf "   \033[38;5;15m%-12s\033[0m \033[1;31m‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m\n" "–°—Ç–∞—Ç—É—Å:"
        echo -e "\033[38;5;8m   –í—ã–ø–æ–ª–Ω–∏—Ç–µ '\033[38;5;15msudo $APP_NAME install\033[38;5;8m' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏\033[0m"
        exit 1
    fi
    
    detect_compose
    
    if ! is_remnanode_up; then
        printf "   \033[38;5;15m%-12s\033[0m \033[1;33m‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m\n" "–°—Ç–∞—Ç—É—Å:"
        echo -e "\033[38;5;8m   –ó–∞–ø—É—Å—Ç–∏—Ç–µ '\033[38;5;15msudo $APP_NAME up\033[38;5;8m' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞\033[0m"
        exit 1
    fi
    
    printf "   \033[38;5;15m%-12s\033[0m \033[1;32m‚úÖ –ó–∞–ø—É—â–µ–Ω\033[0m\n" "–°—Ç–∞—Ç—É—Å:"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if [ -f "$ENV_FILE" ]; then
        local app_port=$(grep "APP_PORT=" "$ENV_FILE" | cut -d'=' -f2 2>/dev/null)
        if [ -n "$app_port" ]; then
            printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s\033[0m\n" "–ü–æ—Ä—Ç:" "$app_port"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Xray
    local xray_version=$(get_current_xray_core_version)
    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s\033[0m\n" "Xray Core:" "$xray_version"
    
    echo
}

logs_command() {
    help() {
        colorized_echo red "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: remnanode logs [–æ–ø—Ü–∏–∏]"
        echo "OPTIONS:"
        echo "  -h, --help        display this help message"
        echo "  -n, --no-follow   do not show follow logs"
    }
    
    local no_follow=false
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -n|--no-follow) no_follow=true ;;
            -h|--help) help; exit 0 ;;
            *) echo "Error: Invalid option: $1" >&2; help; exit 0 ;;
        esac
        shift
    done
    
    if ! is_remnanode_installed; then
        colorized_echo red "RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    detect_compose
    
    if ! is_remnanode_up; then
        colorized_echo red "RemnaNode –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        exit 1
    fi
    
    if [ "$no_follow" = true ]; then
        show_remnanode_logs
    else
        follow_remnanode_logs
    fi
}

# update_command() {
#     check_running_as_root
#     if ! is_remnanode_installed; then
#         echo -e "\033[1;31m‚ùå RemnaNode not installed!\033[0m"
#         echo -e "\033[38;5;8m   Run '\033[38;5;15msudo $APP_NAME install\033[38;5;8m' first\033[0m"
#         exit 1
#     fi
    
#     detect_compose
    
#     echo -e "\033[1;37müîÑ Starting RemnaNode Update...\033[0m"
#     echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
    
#     echo -e "\033[38;5;250müìù Step 1:\033[0m Updating script..."
#     update_remnanode_script
#     echo -e "\033[1;32m‚úÖ Script updated\033[0m"
    
#     echo -e "\033[38;5;250müìù Step 2:\033[0m Pulling latest version..."
#     update_remnanode
#     echo -e "\033[1;32m‚úÖ Image updated\033[0m"
    
#     echo -e "\033[38;5;250müìù Step 3:\033[0m Restarting services..."
#     down_remnanode
#     up_remnanode
#     echo -e "\033[1;32m‚úÖ Services restarted\033[0m"
    
#     echo
#     echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
#     echo -e "\033[1;37müéâ RemnaNode updated successfully!\033[0m"
#     echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
# }



update_command() {
    check_running_as_root
    if ! is_remnanode_installed; then
    echo -e "\033[1;31m‚ùå RemnaNode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\033[0m"
    echo -e "\033[38;5;8m   –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ '\033[38;5;15msudo $APP_NAME install\033[38;5;8m'\033[0m"
        exit 1
    fi
    
    detect_compose
    
    echo -e "\033[1;37müîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π RemnaNode...\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ–≥ –∏–∑ docker-compose.yml
    local current_tag="latest"
    if [ -f "$COMPOSE_FILE" ]; then
        current_tag=$(grep -E "image:.*remnawave/node:" "$COMPOSE_FILE" | sed 's/.*remnawave\/node://' | tr -d '"' | tr -d "'" | xargs)
        if [ -z "$current_tag" ]; then
            current_tag="latest"
        fi
    fi
    
    echo -e "\033[38;5;250müè∑Ô∏è  –¢–µ–∫—É—â–∏–π —Ç–µ–≥:\033[0m \033[38;5;15m$current_tag\033[0m"
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—Ä–∞–∑–∞
    echo -e "\033[38;5;250müìù –®–∞–≥ 1:\033[0m –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–∞..."
    local local_image_id=""
    local local_created=""
    
    if docker images remnawave/node:$current_tag --format "table {{.ID}}\t{{.CreatedAt}}" | grep -v "IMAGE ID" > /dev/null 2>&1; then
        local_image_id=$(docker images remnawave/node:$current_tag --format "{{.ID}}" | head -1)
        local_created=$(docker images remnawave/node:$current_tag --format "{{.CreatedAt}}" | head -1 | cut -d' ' -f1,2)
        
        echo -e "\033[1;32m‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω\033[0m"
        echo -e "\033[38;5;8m   ID –æ–±—Ä–∞–∑–∞: $local_image_id\033[0m"
        echo -e "\033[38;5;8m   –°–æ–∑–¥–∞–Ω: $local_created\033[0m"
    else
        echo -e "\033[1;33m‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω\033[0m"
        local_image_id="none"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ docker pull
    echo -e "\033[38;5;250müìù –®–∞–≥ 2:\033[0m –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é docker pull..."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–∑ ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    local old_image_id="$local_image_id"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º docker pull
    if $COMPOSE -f $COMPOSE_FILE pull --quiet 2>/dev/null; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ ID –æ–±—Ä–∞–∑–∞ –ø–æ—Å–ª–µ pull
        local new_image_id=$(docker images remnawave/node:$current_tag --format "{{.ID}}" | head -1)
        
        local needs_update=false
        local update_reason=""
        
        if [ "$old_image_id" = "none" ]; then
            needs_update=true
            update_reason="Local image not found, downloaded new version"
            echo -e "\033[1;33müîÑ New image downloaded\033[0m"
        elif [ "$old_image_id" != "$new_image_id" ]; then
            needs_update=true
            update_reason="New version downloaded via docker pull"
            echo -e "\033[1;33müîÑ New version detected and downloaded\033[0m"
        else
            needs_update=false
            update_reason="Already up to date (verified via docker pull)"
            echo -e "\033[1;32m‚úÖ Already up to date\033[0m"
        fi
    else
        echo -e "\033[1;33m‚ö†Ô∏è  Docker pull –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ\033[0m"
        local needs_update=true
        local update_reason="Unable to verify current version"
        local new_image_id="$old_image_id"
    fi
    
    echo
    echo -e "\033[1;37müìä –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    
    if [ "$needs_update" = true ]; then
        echo -e "\033[1;33müîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\033[0m"
        echo -e "\033[38;5;250m   –ü—Ä–∏—á–∏–Ω–∞: \033[38;5;15m$update_reason\033[0m"
        echo
        
        # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if [[ "$update_reason" == *"downloaded"* ]]; then
            echo -e "\033[1;37müöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...\033[0m"
        else
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/n): " -r confirm_update
            if [[ ! $confirm_update =~ ^[Yy]$ ]]; then
                echo -e "\033[1;31m‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\033[0m"
                exit 0
            fi
        fi
        
        echo
        echo -e "\033[1;37müöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...\033[0m"
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
        echo -e "\033[38;5;250müìù –®–∞–≥ 3:\033[0m –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞..."
        if update_remnanode_script; then
            echo -e "\033[1;32m‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω\033[0m"
        else
            echo -e "\033[1;33m‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...\033[0m"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        local was_running=false
        if is_remnanode_up; then
            was_running=true
            echo -e "\033[38;5;250müìù –®–∞–≥ 4:\033[0m –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
            if down_remnanode; then
                echo -e "\033[1;32m‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"
            else
                echo -e "\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä\033[0m"
                exit 1
            fi
        else
            echo -e "\033[38;5;250müìù –®–∞–≥ 4:\033[0m –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É..."
        fi
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if [[ "$update_reason" != *"downloaded"* ]]; then
            echo -e "\033[38;5;250müìù –®–∞–≥ 5:\033[0m –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–∞..."
            if update_remnanode; then
                echo -e "\033[1;32m‚úÖ –û–±—Ä–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω\033[0m"
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ–±—Ä–∞–∑–∞
                new_image_id=$(docker images remnawave/node:$current_tag --format "{{.ID}}" | head -1)
            else
                echo -e "\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑\033[0m"
                
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                if [ "$was_running" = true ]; then
                    echo -e "\033[38;5;250müîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å...\033[0m"
                    up_remnanode
                fi
                exit 1
            fi
        else
            echo -e "\033[38;5;250müìù –®–∞–≥ 5:\033[0m –û–±—Ä–∞–∑ —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏\033[0m"
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ä–∞–Ω–µ–µ
        if [ "$was_running" = true ]; then
            echo -e "\033[38;5;250müìù –®–∞–≥ 6:\033[0m –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
            if up_remnanode; then
                echo -e "\033[1;32m‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω\033[0m"
            else
                echo -e "\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä\033[0m"
                exit 1
            fi
        else
            echo -e "\033[38;5;250müìù –®–∞–≥ 6:\033[0m –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º..."
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        echo
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
        echo -e "\033[1;37müéâ RemnaNode —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\033[0m"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–µ
        local final_created=$(docker images remnawave/node:$current_tag --format "{{.CreatedAt}}" | head -1 | cut -d' ' -f1,2)
        
        echo -e "\033[1;37müìã –°–≤–æ–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\033[0m"
        echo -e "\033[38;5;250m   –ü—Ä–µ–¥—ã–¥—É—â–∏–π: \033[38;5;8m$old_image_id\033[0m"
        echo -e "\033[38;5;250m   –¢–µ–∫—É—â–∏–π:  \033[38;5;15m$new_image_id\033[0m"
        echo -e "\033[38;5;250m   –°–æ–∑–¥–∞–Ω:  \033[38;5;15m$final_created\033[0m"
        
        if [ "$was_running" = true ]; then
            echo -e "\033[38;5;250m   –°—Ç–∞—Ç—É—Å:   \033[1;32m–ó–∞–ø—É—â–µ–Ω\033[0m"
        else
            echo -e "\033[38;5;250m   –°—Ç–∞—Ç—É—Å:   \033[1;33m–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"
            echo -e "\033[38;5;8m   Use '\033[38;5;15msudo $APP_NAME up\033[38;5;8m' to start\033[0m"
        fi
        
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 50))\033[0m"
        
    else
        echo -e "\033[1;32m‚úÖ –£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ\033[0m"
        echo -e "\033[38;5;250m   –ü—Ä–∏—á–∏–Ω–∞: \033[38;5;15m$update_reason\033[0m"
        echo
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–∫—Ä–∏–ø—Ç
        echo -e "\033[38;5;250müìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞...\033[0m"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å–∫—Ä–∏–ø—Ç–∞
        local current_script_version="$SCRIPT_VERSION"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å–∫—Ä–∏–ø—Ç–∞ —Å GitHub
        local remote_script_version=$(curl -s "$SCRIPT_URL" 2>/dev/null | grep "^SCRIPT_VERSION=" | cut -d'"' -f2)
        
        if [ -n "$remote_script_version" ] && [ "$remote_script_version" != "$current_script_version" ]; then
            echo -e "\033[1;33müîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞: \033[38;5;15mv$current_script_version\033[0m ‚Üí \033[1;37mv$remote_script_version\033[0m"
            read -p "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç? (y/n): " -r update_script
            if [[ $update_script =~ ^[Yy]$ ]]; then
                if update_remnanode_script; then
                    echo -e "\033[1;32m‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ v$remote_script_version\033[0m"
                    echo -e "\033[38;5;8m   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏\033[0m"
                else
                    echo -e "\033[1;33m‚ö†Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å\033[0m"
                fi
            else
                echo -e "\033[38;5;8m   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ\033[0m"
            fi
        else
            echo -e "\033[1;32m‚úÖ –°–∫—Ä–∏–ø—Ç –∞–∫—Ç—É–∞–ª–µ–Ω\033[0m"
        fi
        
        echo
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
        echo -e "\033[1;37müìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\033[0m"
        
        if is_remnanode_up; then
            echo -e "\033[38;5;250m   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: \033[1;32m–ó–∞–ø—É—â–µ–Ω ‚úÖ\033[0m"
        else
            echo -e "\033[38;5;250m   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: \033[1;33m–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚èπÔ∏è\033[0m"
            echo -e "\033[38;5;8m   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\033[38;5;15msudo $APP_NAME up\033[38;5;8m' –¥–ª—è –∑–∞–ø—É—Å–∫–∞\033[0m"
        fi
        
        echo -e "\033[38;5;250m   –¢–µ–≥ –æ–±—Ä–∞–∑–∞: \033[38;5;15m$current_tag\033[0m"
        echo -e "\033[38;5;250m   ID –æ–±—Ä–∞–∑–∞:  \033[38;5;15m$local_image_id\033[0m"
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    fi
}

identify_the_operating_system_and_architecture() {
    if [[ "$(uname)" == 'Linux' ]]; then
        case "$(uname -m)" in
            'i386' | 'i686') ARCH='32' ;;
            'amd64' | 'x86_64') ARCH='64' ;;
            'armv5tel') ARCH='arm32-v5' ;;
            'armv6l') ARCH='arm32-v6'; grep Features /proc/cpuinfo | grep -qw 'vfp' || ARCH='arm32-v5' ;;
            'armv7' | 'armv7l') ARCH='arm32-v7a'; grep Features /proc/cpuinfo | grep -qw 'vfp' || ARCH='arm32-v5' ;;
            'armv8' | 'aarch64') ARCH='arm64-v8a' ;;
            'mips') ARCH='mips32' ;;
            'mipsle') ARCH='mips32le' ;;
            'mips64') ARCH='mips64'; lscpu | grep -q "Little Endian" && ARCH='mips64le' ;;
            'mips64le') ARCH='mips64le' ;;
            'ppc64') ARCH='ppc64' ;;
            'ppc64le') ARCH='ppc64le' ;;
            'riscv64') ARCH='riscv64' ;;
            's390x') ARCH='s390x' ;;
            *) echo "error: The architecture is not supported."; exit 1 ;;
        esac
    else
        echo "error: This operating system is not supported."
        exit 1
    fi
}

get_xray_host_path_from_compose() {
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å —Ö–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ /usr/local/bin/xray
    if [ -f "$COMPOSE_FILE" ]; then
        awk '
            /^[[:space:]]*-[[:space:]]*/ && /:\/usr\/local\/bin\/xray/ {
                line=$0
                sub(/^[[:space:]]*-[[:space:]]*/,"",line)
                idx=index(line,":/usr/local/bin/xray")
                if (idx>0) {
                    host=substr(line,1,idx-1)
                    # –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ –ø—É—Ç–∏
                    gsub(/^"|"$/,"",host)
                    gsub(/^'"'"'|'"'"'$/ ,"",host)
                    print host
                    exit
                }
            }
        ' "$COMPOSE_FILE"
    fi
}

get_current_xray_core_version() {
    # 1) –ü—Ä–æ–±—É–µ–º –ø—É—Ç—å –∏–∑ docker-compose (–µ—Å–ª–∏ –µ—Å—Ç—å)
    local host_path
    host_path=$(get_xray_host_path_from_compose 2>/dev/null)
    if [ -n "$host_path" ] && [ -f "$host_path" ]; then
        local version_output version
        version_output=$("$host_path" -version 2>/dev/null)
        if [ $? -eq 0 ]; then
            version=$(echo "$version_output" | head -n1 | awk '{print $2}')
            [ -n "$version" ] && { echo "$version"; return; }
        fi
    fi

    # 2) –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å XRAY_FILE
    if [ -f "$XRAY_FILE" ]; then
        local version_output version
        version_output=$("$XRAY_FILE" -version 2>/dev/null)
        if [ $? -eq 0 ]; then
            version=$(echo "$version_output" | head -n1 | awk '{print $2}')
            [ -n "$version" ] && { echo "$version"; return; }
        fi
    fi

    # 3) –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω ‚Äî —Å–º–æ—Ç—Ä–∏–º –±–∏–Ω–∞—Ä—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if is_remnanode_up; then
        local version_output version
        version_output=$(docker exec "$APP_NAME" /usr/local/bin/xray -version 2>/dev/null | head -n1)
        version=$(echo "$version_output" | awk '{print $2}')
        [ -n "$version" ] && { echo "$version"; return; }
    fi

    echo "Not installed"
}

get_xray_core() {
    identify_the_operating_system_and_architecture
    clear
    
    validate_version() {
        local version="$1"
        local response=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases/tags/$version")
        if echo "$response" | grep -q '"message": "Not Found"'; then
            echo "invalid"
        else
            echo "valid"
        fi
    }
    
    print_menu() {
        clear
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º —Å—Ç–∏–ª–µ
        echo -e "\033[1;37m‚ö° Xray-core Installer\033[0m \033[38;5;8mVersion Manager\033[0m \033[38;5;244mv$SCRIPT_VERSION\033[0m"
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
        echo
        
        # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
        current_version=$(get_current_xray_core_version)
        echo -e "\033[1;37müåê Current Status:\033[0m"
        printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "Xray Version:" "$current_version"
        printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "Architecture:" "$ARCH"
        printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "Install Path:" "$XRAY_FILE"
        echo
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤
        echo -e "\033[1;37müéØ Release Mode:\033[0m"
        if [ "$show_prereleases" = true ]; then
            printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m \033[38;5;244m(Including Pre-releases)\033[0m\n" "Current:" "All Releases"
        else
            printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m \033[1;37m(Stable Only)\033[0m\n" "Current:" "Stable Releases"
        fi
        echo
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å –º–µ—Ç–∫–∞–º–∏
        echo -e "\033[1;37müöÄ Available Versions:\033[0m"
        for ((i=0; i<${#versions[@]}; i++)); do
            local version_num=$((i + 1))
            local version_name="${versions[i]}"
            local is_prerelease="${prereleases[i]}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º echo –≤–º–µ—Å—Ç–æ printf
            if [ "$is_prerelease" = "true" ]; then
                echo -e "   \033[38;5;15m${version_num}:\033[0m \033[38;5;250m${version_name}\033[0m \033[38;5;244m(Pre-release)\033[0m"
            elif [ $i -eq 0 ] && [ "$is_prerelease" = "false" ]; then
                echo -e "   \033[38;5;15m${version_num}:\033[0m \033[38;5;250m${version_name}\033[0m \033[1;37m(Latest Stable)\033[0m"
            else
                echo -e "   \033[38;5;15m${version_num}:\033[0m \033[38;5;250m${version_name}\033[0m \033[38;5;8m(Stable)\033[0m"
            fi
        done
        echo
        
        # –û–ø—Ü–∏–∏
        echo -e "\033[1;37müîß –û–ø—Ü–∏–∏:\033[0m"
        printf "   \033[38;5;15m%-3s\033[0m %s\n" "M:" "üìù –í–≤–µ—Å—Ç–∏ –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é"
        if [ "$show_prereleases" = true ]; then
            printf "   \033[38;5;15m%-3s\033[0m %s\n" "S:" "üîí –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã"
        else
            printf "   \033[38;5;15m%-3s\033[0m %s\n" "A:" "üß™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–ª–∏–∑—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–µ-—Ä–µ–ª–∏–∑—ã)"
        fi
        printf "   \033[38;5;15m%-3s\033[0m %s\n" "R:" "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π"
        printf "   \033[38;5;15m%-3s\033[0m %s\n" "D:" "üè† –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Xray –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        printf "   \033[38;5;15m%-3s\033[0m %s\n" "Q:" "‚ùå –í—ã–π—Ç–∏ –∏–∑ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"
        echo
        
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
        echo -e "\033[1;37müìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\033[0m"
        echo -e "   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä \033[38;5;15m(1-${#versions[@]})\033[0m, \033[38;5;15mM\033[0m –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, \033[38;5;15mA/S\033[0m –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤, \033[38;5;15mD\033[0m –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–ª–∏ \033[38;5;15mQ\033[0m –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 70))\033[0m"
    }
    
    fetch_versions() {
        local include_prereleases="$1"
        echo -e "\033[1;37müîç Fetching Xray-core versions...\033[0m"
        
        if [ "$include_prereleases" = true ]; then
            echo -e "\033[38;5;8m   Including pre-releases...\033[0m"
            latest_releases=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases?per_page=8")
        else
            echo -e "\033[38;5;8m   Stable releases only...\033[0m"
            latest_releases=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases?per_page=15")
        fi
        
        if [ -z "$latest_releases" ] || echo "$latest_releases" | grep -q '"message":'; then
            echo -e "\033[1;31m‚ùå Failed to fetch versions. Please check your internet connection.\033[0m"
            return 1
        fi
        
        # –ü–∞—Ä—Å–∏–º JSON –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        versions=()
        prereleases=()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        local temp_file=$(mktemp)
        echo "$latest_releases" | grep -E '"(tag_name|prerelease)"' > "$temp_file"
        
        local current_version=""
        local count=0
        local max_count=6
        
        while IFS= read -r line; do
            if [[ "$line" =~ \"tag_name\":[[:space:]]*\"([^\"]+)\" ]]; then
                current_version="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ \"prerelease\":[[:space:]]*(true|false) ]]; then
                local is_prerelease="${BASH_REMATCH[1]}"
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º pre-releases, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö
                if [ "$include_prereleases" = false ] && [ "$is_prerelease" = "true" ]; then
                    current_version=""
                    continue
                fi
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –º–∞—Å—Å–∏–≤—ã
                if [ -n "$current_version" ] && [ $count -lt $max_count ]; then
                    versions+=("$current_version")
                    prereleases+=("$is_prerelease")
                    ((count++))
                fi
                current_version=""
            fi
        done < "$temp_file"
        
        rm "$temp_file"
        
        if [ ${#versions[@]} -eq 0 ]; then
            echo -e "\033[1;31m‚ùå No versions found.\033[0m"
            return 1
        fi
        
        echo -e "\033[1;32m‚úÖ Found ${#versions[@]} versions\033[0m"
        return 0
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    local show_prereleases=false
    
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π
    if ! fetch_versions "$show_prereleases"; then
        exit 1
    fi
    
    while true; do
        print_menu
        echo -n -e "\033[1;37m> \033[0m"
        read choice
        
        if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [ "$choice" -le "${#versions[@]}" ]; then
            choice=$((choice - 1))
            selected_version=${versions[choice]}
            local selected_prerelease=${prereleases[choice]}
            
            echo
            if [ "$selected_prerelease" = "true" ]; then
            echo -e "\033[1;33m‚ö†Ô∏è  –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–µ-—Ä–µ–ª–∏–∑–Ω–∞—è –≤–µ—Ä—Å–∏—è: \033[1;37m$selected_version\033[0m"
            echo -–µ "\033[38;5;8m   –ü—Ä–µ-—Ä–µ–ª–∏–∑—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.\033[0m"
            read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " -r confirm_prerelease
                if [[ ! $confirm_prerelease =~ ^[Yy]$ ]]; then
                echo -e "\033[1;31m‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\033[0m"
                    continue
                fi
            else
                echo -e "\033[1;32m‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: \033[1;37m$selected_version\033[0m"
            fi
            break
            
        elif [ "$choice" == "M" ] || [ "$choice" == "m" ]; then
            echo
            echo -e "\033[1;37müìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤–µ—Ä—Å–∏–∏:\033[0m"
            while true; do
                echo -n -–µ "\033[38;5;8m–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, v1.8.4): \033[0m"
                read custom_version
                
                if [ -z "$custom_version" ]; then
                    echo -e "\033[1;31m‚ùå –í–µ—Ä—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\033[0m"
                    continue
                fi
                
                echo -e "\033[1;37müîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ $custom_version...\033[0m"
                if [ "$(validate_version "$custom_version")" == "valid" ]; then
                    selected_version="$custom_version"
                    echo -e "\033[1;32m‚úÖ –í–µ—Ä—Å–∏—è $custom_version –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!\033[0m"
                    break 2
                else
                    echo -e "\033[1;31m‚ùå –í–µ—Ä—Å–∏—è $custom_version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\033[0m"
                    echo -e "\033[38;5;8m   –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ https://github.com/XTLS/Xray-core/releases\033[0m"
                    echo
                fi
            done
            
        elif [ "$choice" == "A" ] || [ "$choice" == "a" ]; then
            if [ "$show_prereleases" = false ]; then
                show_prereleases=true
                if ! fetch_versions "$show_prereleases"; then
                    show_prereleases=false
                    continue
                fi
            fi
            
        elif [ "$choice" == "S" ] || [ "$choice" == "s" ]; then
            if [ "$show_prereleases" = true ]; then
                show_prereleases=false
                if ! fetch_versions "$show_prereleases"; then
                    show_prereleases=true
                    continue
                fi
            fi
            
        elif [ "$choice" == "R" ] || [ "$choice" == "r" ]; then
            if ! fetch_versions "$show_prereleases"; then
                continue
            fi
            
        elif [ "$choice" == "D" ] || [ "$choice" == "d" ]; then
            echo
            echo -e "\033[1;33müè† –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Xray –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\033[0m"
            echo -e "\033[38;5;8m   –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤–Ω–µ—à–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Xray –∏ –≤–µ—Ä–Ω—ë—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.\033[0m"
            echo
            read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Xray –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞? (y/n): " -r confirm_restore
            if [[ $confirm_restore =~ ^[Yy]$ ]]; then
                restore_to_container_default
                echo
                echo -n -e "\033[38;5;8m–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...\033[0m"
                read
            else
                echo -e "\033[1;31m‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\033[0m"
                echo
                echo -n -e "\033[38;5;8m–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...\033[0m"
                read
            fi
            
        elif [ "$choice" == "Q" ] || [ "$choice" == "q" ]; then
            echo
            echo -e "\033[1;31m‚ùå Installation cancelled by user.\033[0m"
            exit 0
            
        else
            echo
            echo -e "\033[1;31m‚ùå Invalid choice: '$choice'\033[0m"
            echo -e "\033[38;5;8m   Please enter a number between 1-${#versions[@]}, M for manual, A/S to toggle releases, R to refresh, D to restore default, or Q to quit.\033[0m"
            echo
            echo -n -e "\033[38;5;8mPress Enter to continue...\033[0m"
            read
        fi
    done
    
    echo
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 60))\033[0m"
    echo -e "\033[1;37müöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 60))\033[0m"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ unzip
    if ! dpkg -s unzip >/dev/null 2>&1; then
        echo -e "\033[1;37müì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...\033[0m"
        detect_os
        install_package unzip
        echo -e "\033[1;32m‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\033[0m"
    fi
    
    mkdir -p "$DATA_DIR"
    cd "$DATA_DIR"
    
    xray_filename="Xray-linux-$ARCH.zip"
    xray_download_url="https://github.com/XTLS/Xray-core/releases/download/${selected_version}/${xray_filename}"
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    echo -e "\033[1;37müì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Xray-core $selected_version...\033[0m"
    echo -e "\033[38;5;8m   URL: $xray_download_url\033[0m"
    
    if wget "${xray_download_url}" -q --show-progress; then
        echo -e "\033[1;32m‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\033[0m"
    else
        echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!\033[0m"
        echo -e "\033[38;5;8m   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–µ—Ä—Å–∏—é.\033[0m"
        exit 1
    fi
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
    echo -e "\033[1;37müì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Xray-core...\033[0m"
    if unzip -o "${xray_filename}" -d "$DATA_DIR" >/dev/null 2>&1; then
        echo -e "\033[1;32m‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\033[0m"
    else
        echo -e "\033[1;31m‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è!\033[0m"
        echo -e "\033[38;5;8m   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.\033[0m"
        exit 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤
    rm "${xray_filename}"
    chmod +x "$XRAY_FILE"
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    echo
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 60))\033[0m"
    echo -e "\033[1;37müéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\033[0m"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    echo -–µ "\033[1;37müìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\033[0m"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–í–µ—Ä—Å–∏—è:" "$selected_version"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:" "$ARCH"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" "$XRAY_FILE"
    printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:" "$(du -h "$XRAY_FILE" | cut -f1)"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    echo -e "\033[1;37müîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...\033[0m"
    if installed_version=$("$XRAY_FILE" -version 2>/dev/null | head -n1 | awk '{print $2}'); then
        echo -e "\033[1;32m‚úÖ Xray-core —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\033[0m"
        printf "   \033[38;5;15m%-15s\033[0m \033[38;5;250m%s\033[0m\n" "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è:" "$installed_version"
    else
        echo -e "\033[1;31m‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞\033[0m"
        echo -e "\033[38;5;8m   –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π\033[0m"
    fi
}



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞
create_backup() {
    local file="$1"
    local backup_file="${file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if [ -f "$file" ]; then
        cp "$file" "$backup_file"
        echo "$backup_file"
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_backup() {
    local backup_file="$1"
    local original_file="$2"
    
    if [ -f "$backup_file" ]; then
        cp "$backup_file" "$original_file"
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ docker-compose —Ñ–∞–π–ª–∞
validate_compose_file() {
    local compose_file="$1"
    
    if [ ! -f "$compose_file" ]; then
        return 1
    fi
    

    local current_dir=$(pwd)
    

    cd "$(dirname "$compose_file")"
    

    if command -v docker >/dev/null 2>&1; then

        detect_compose
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞
        if $COMPOSE config >/dev/null 2>&1; then
            cd "$current_dir"
            return 0
        else

            colorized_echo red "–û—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose:"
            $COMPOSE config 2>&1 | head -10
            cd "$current_dir"
            return 1
        fi
    else

        if grep -q "services:" "$compose_file" && grep -q "remnanode:" "$compose_file"; then
            cd "$current_dir"
            return 0
        else
            cd "$current_dir"
            return 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
cleanup_old_backups() {
    local file_pattern="$1"
    local keep_count=5
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
    ls -t ${file_pattern}.backup.* 2>/dev/null | tail -n +$((keep_count + 1)) | xargs rm -f 2>/dev/null || true
}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤ –∏–∑ docker-compose.yml
get_indentation_from_compose() {
    local compose_file="$1"
    local indentation=""
    
    if [ -f "$compose_file" ]; then
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "remnanode:" (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        local service_line=$(grep -n "remnanode:" "$compose_file" | head -1)
        if [ -n "$service_line" ]; then
            local line_content=$(echo "$service_line" | cut -d':' -f2-)
            indentation=$(echo "$line_content" | sed 's/remnanode:.*//' | grep -o '^[[:space:]]*')
        fi
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å —Å "remna"
        if [ -z "$indentation" ]; then
            local remna_service_line=$(grep -E "^[[:space:]]*[a-zA-Z0-9_-]*remna[a-zA-Z0-9_-]*:" "$compose_file" | head -1)
            if [ -n "$remna_service_line" ]; then
                indentation=$(echo "$remna_service_line" | sed 's/[a-zA-Z0-9_-]*remna[a-zA-Z0-9_-]*:.*//' | grep -o '^[[:space:]]*')
            fi
        fi
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ—Ä–≤–∏—Å —Å "remna", –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å
        if [ -z "$indentation" ]; then
            local any_service_line=$(grep -E "^[[:space:]]*[a-zA-Z0-9_-]+:" "$compose_file" | head -1)
            if [ -n "$any_service_line" ]; then
                indentation=$(echo "$any_service_line" | sed 's/[a-zA-Z0-9_-]*:.*//' | grep -o '^[[:space:]]*')
            fi
        fi
    fi
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2 –ø—Ä–æ–±–µ–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ -z "$indentation" ]; then
        indentation="  "
    fi
    
    echo "$indentation"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤ —Å–µ—Ä–≤–∏—Å–∞
get_service_property_indentation() {
    local compose_file="$1"
    local base_indent=$(get_indentation_from_compose "$compose_file")
    local indent_type=""
    if [[ "$base_indent" =~ $'\t' ]]; then
        indent_type=$'\t'
    else
        indent_type="  "
    fi
    local property_indent=""
    if [ -f "$compose_file" ]; then
        local in_remna_service=false
        local current_service=""
        
        while IFS= read -r line; do

            if [[ "$line" =~ ^[[:space:]]*[a-zA-Z0-9_-]+:[[:space:]]*$ ]]; then
                current_service=$(echo "$line" | sed 's/^[[:space:]]*//' | sed 's/:[[:space:]]*$//')
                

                if [[ "$current_service" =~ remna ]]; then
                    in_remna_service=true
                else
                    in_remna_service=false
                fi
                continue
            fi
            

            if [ "$in_remna_service" = true ]; then
                local line_indent=$(echo "$line" | grep -o '^[[:space:]]*')
                

                if [[ "$line" =~ ^[[:space:]]*[a-zA-Z0-9_-]+:[[:space:]]*$ ]] && [ ${#line_indent} -le ${#base_indent} ]; then
                    break
                fi
                

                if [[ "$line" =~ ^[[:space:]]*[a-zA-Z0-9_-]+:[[:space:]] ]] && [[ ! "$line" =~ ^[[:space:]]*- ]]; then
                    property_indent=$(echo "$line" | sed 's/[a-zA-Z0-9_-]*:.*//' | grep -o '^[[:space:]]*')
                    break
                fi
            fi
        done < "$compose_file"
    fi
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ –∫ –±–∞–∑–æ–≤–æ–º—É
    if [ -z "$property_indent" ]; then
        property_indent="${base_indent}${indent_type}"
    fi
    
    echo "$property_indent"
}


escape_for_sed() {
    local text="$1"
    echo "$text" | sed 's/[]\.*^$()+?{|[]/\\&/g' | sed 's/\t/\\t/g'
}


normalize_volumes_indentation() {
    local compose_file="$1"
    [ -f "$compose_file" ] || return 0

    local service_indent=$(get_service_property_indentation "$compose_file")
    local indent_type=""
    if [[ "$service_indent" =~ $'\t' ]]; then
        indent_type=$'\t'
    else
        indent_type="  "
    fi
    local item_indent="${service_indent}${indent_type}"

    # –ü–µ—Ä–µ–Ω–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Å—Ç—É–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ '-' –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ volumes —Å–µ—Ä–≤–∏—Å–∞ remna*
    local tmp_file
    tmp_file=$(mktemp)
    awk -v base="${service_indent}" -v item="${item_indent}" '
        function indent_len(s,  n,i,c) { n=0; for(i=1;i<=length(s);i++){c=substr(s,i,1); if(c=="\t"){n+=1}else if(c==" "){n+=1}else break} return n }
        function starts_with_volumes(line,base){return (line ~ "^" base "volumes:[[:space:]]*$")}
        BEGIN{in_remna=0; in_vol=0; base_len=length(base)}
        {
            line=$0
            # –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
            if (match(line, /^[[:space:]]*[A-Za-z0-9_-]+:[[:space:]]*$/)) {
                name=line; sub(/^[[:space:]]*/, "", name); sub(/:[[:space:]]*$/, "", name)
                # –í—ã—Ö–æ–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏ volumes –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ –Ω–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞/—Å–µ—Ä–≤–∏—Å–∞ c –æ—Ç—Å—Ç—É–ø–æ–º –Ω–µ –±–æ–ª—å—à–µ base
                if (in_vol) { in_vol=0 }
                if (name ~ /remna/) { in_remna=1 } else if (indent_len(line) <= base_len) { in_remna=0 }
            }
            # –í—Ö–æ–¥ –≤ volumes
            if (in_remna && starts_with_volumes(line, base)) { in_vol=1; print line; next }
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (in_vol && match(line, /^[[:space:]]*-[[:space:]]/)) {
                sub(/^[[:space:]]*-[[:space:]]*/, item "- ", line)
                print line; next
            }
            print $0
        }
    ' "$compose_file" > "$tmp_file" && mv "$tmp_file" "$compose_file"
}

update_core_command() {
    check_running_as_root
    get_xray_core
    colorized_echo blue "Updating docker-compose.yml with Xray-core volume..."
    

    if [ ! -f "$COMPOSE_FILE" ]; then
        colorized_echo red "–§–∞–π–ª Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $COMPOSE_FILE"
        exit 1
    fi
    

    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ docker-compose.yml..."
    backup_file=$(create_backup "$COMPOSE_FILE")
    if [ $? -eq 0 ]; then
        colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
    else
        colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        exit 1
    fi
    

    local service_indent=$(get_service_property_indentation "$COMPOSE_FILE")
    

    local indent_type=""
    if [[ "$service_indent" =~ $'\t' ]]; then
        indent_type=$'\t'
    else
        indent_type="  "
    fi
    local volume_item_indent="${service_indent}${indent_type}"
    

    local escaped_service_indent=$(escape_for_sed "$service_indent")
    local escaped_volume_item_indent=$(escape_for_sed "$volume_item_indent")

    if grep -q "^${escaped_service_indent}volumes:" "$COMPOSE_FILE"; then
        # Remove existing xray-related volumes using # as delimiter to avoid issues with / in paths
        sed -i "\#$XRAY_FILE#d" "$COMPOSE_FILE"
        sed -i "\#geoip\.dat#d" "$COMPOSE_FILE"
        sed -i "\#geosite\.dat#d" "$COMPOSE_FILE"
        
        # Create temporary file with volume mounts
        temp_volumes=$(mktemp)
        echo "${volume_item_indent}- $XRAY_FILE:/usr/local/bin/xray" > "$temp_volumes"
        if [ -f "$GEOIP_FILE" ]; then
            echo "${volume_item_indent}- $GEOIP_FILE:/usr/local/share/xray/geoip.dat" >> "$temp_volumes"
        fi
        if [ -f "$GEOSITE_FILE" ]; then
            echo "${volume_item_indent}- $GEOSITE_FILE:/usr/local/share/xray/geosite.dat" >> "$temp_volumes"
        fi
        
        # Insert volumes after the volumes: line
        sed -i "/^${escaped_service_indent}volumes:/r $temp_volumes" "$COMPOSE_FILE"
        rm "$temp_volumes"
        colorized_echo green "Updated Xray volumes in existing volumes section"
        
    elif grep -q "^${escaped_service_indent}# volumes:" "$COMPOSE_FILE"; then
        sed -i "s|^${escaped_service_indent}# volumes:|${service_indent}volumes:|g" "$COMPOSE_FILE"
        
        # Create temporary file with volume mounts
        temp_volumes=$(mktemp)
        echo "${volume_item_indent}- $XRAY_FILE:/usr/local/bin/xray" > "$temp_volumes"
        if [ -f "$GEOIP_FILE" ]; then
            echo "${volume_item_indent}- $GEOIP_FILE:/usr/local/share/xray/geoip.dat" >> "$temp_volumes"
        fi
        if [ -f "$GEOSITE_FILE" ]; then
            echo "${volume_item_indent}- $GEOSITE_FILE:/usr/local/share/xray/geosite.dat" >> "$temp_volumes"
        fi
        
        # Insert volumes after the volumes: line
        sed -i "/^${escaped_service_indent}volumes:/r $temp_volumes" "$COMPOSE_FILE"
        rm "$temp_volumes"
        colorized_echo green "Uncommented volumes section and added Xray volumes"
        
    else
        # Create temporary file with volumes section
        temp_volumes=$(mktemp)
        echo "${service_indent}volumes:" > "$temp_volumes"
        echo "${volume_item_indent}- $XRAY_FILE:/usr/local/bin/xray" >> "$temp_volumes"
        if [ -f "$GEOIP_FILE" ]; then
            echo "${volume_item_indent}- $GEOIP_FILE:/usr/local/share/xray/geoip.dat" >> "$temp_volumes"
        fi
        if [ -f "$GEOSITE_FILE" ]; then
            echo "${volume_item_indent}- $GEOSITE_FILE:/usr/local/share/xray/geosite.dat" >> "$temp_volumes"
        fi
        
        # Insert volumes section after restart: always
        sed -i "/^${escaped_service_indent}restart: always/r $temp_volumes" "$COMPOSE_FILE"
        rm "$temp_volumes"
        colorized_echo green "Added new volumes section with Xray volumes"
    fi
    
    # Show what was mounted
    colorized_echo blue "Mounted volumes:"
    colorized_echo green "  ‚úÖ xray ‚Üí /usr/local/bin/xray"
    if [ -f "$GEOIP_FILE" ]; then
        colorized_echo green "  ‚úÖ geoip.dat ‚Üí /usr/local/share/xray/geoip.dat"
    fi
    if [ -f "$GEOSITE_FILE" ]; then
        colorized_echo green "  ‚úÖ geosite.dat ‚Üí /usr/local/share/xray/geosite.dat"
    fi
    

    colorized_echo blue "Validating docker-compose.yml..."
    if validate_compose_file "$COMPOSE_FILE"; then
        colorized_echo green "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
        
        colorized_echo blue "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RemnaNode..."

        restart_command -n
        
        colorized_echo green "Installation of XRAY-CORE version $selected_version completed."
        

        read -p "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é? (y/n): " -r keep_backup
        if [[ ! $keep_backup =~ ^[Yy]$ ]]; then
            rm "$backup_file"
            colorized_echo blue "Backup file removed"
        else
            colorized_echo blue "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $backup_file"
        fi

        cleanup_old_backups "$COMPOSE_FILE"
        
    else
        colorized_echo red "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –Ω–µ –ø—Ä–æ—à–ª–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
        if restore_backup "$backup_file" "$COMPOSE_FILE"; then
            colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            colorized_echo red "Please check the docker-compose.yml file manually"
        else
            colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é! –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            colorized_echo red "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $backup_file"
        fi
        exit 1
    fi
}


restore_to_container_default() {
    check_running_as_root
    colorized_echo blue "Restoring to container default Xray-core..."
    
    if [ ! -f "$COMPOSE_FILE" ]; then
        colorized_echo red "–§–∞–π–ª Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $COMPOSE_FILE"
        exit 1
    fi
    
    # Create backup before making changes
    colorized_echo blue "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ docker-compose.yml..."
    backup_file=$(create_backup "$COMPOSE_FILE")
    if [ $? -eq 0 ]; then
        colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
    else
        colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        exit 1
    fi
    
    local service_indent=$(get_service_property_indentation "$COMPOSE_FILE")
    local escaped_service_indent=$(escape_for_sed "$service_indent")
    
    # Remove xray-related volume mounts using # as delimiter
    colorized_echo blue "Removing external Xray volume mounts..."
    sed -i "\#$XRAY_FILE#d" "$COMPOSE_FILE"
    sed -i "\#geoip\.dat#d" "$COMPOSE_FILE"
    sed -i "\#geosite\.dat#d" "$COMPOSE_FILE"
    
    # Check if volumes section is now empty and comment it out
    if grep -q "^${escaped_service_indent}volumes:" "$COMPOSE_FILE"; then
        # Count non-empty lines after volumes: line within the service
        volume_count=$(sed -n "/^${escaped_service_indent}volumes:/,/^${service_indent}[a-zA-Z_]/p" "$COMPOSE_FILE" | \
                      grep -v "^${escaped_service_indent}volumes:" | \
                      grep -v "^$" | \
                      grep -v "^${service_indent}[a-zA-Z_]" | \
                      wc -l)
        
        if [ "$volume_count" -eq 0 ]; then
            colorized_echo blue "Commenting out empty volumes section..."
            sed -i "s|^${escaped_service_indent}volumes:|${service_indent}# volumes:|g" "$COMPOSE_FILE"
        fi
    fi
    
    # Validate the docker-compose file
    colorized_echo blue "Validating docker-compose.yml..."
    if validate_compose_file "$COMPOSE_FILE"; then
        colorized_echo green "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
        
        colorized_echo blue "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RemnaNode –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Xray –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        restart_command -n
        
        colorized_echo green "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Xray-core –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        colorized_echo blue "The container will now use its built-in Xray version"
        
        # Ask about backup
        read -p "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é? (y/n): " -r keep_backup
        if [[ ! $keep_backup =~ ^[Yy]$ ]]; then
            rm "$backup_file"
            colorized_echo blue "Backup file removed"
        else
            colorized_echo blue "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $backup_file"
        fi

        cleanup_old_backups "$COMPOSE_FILE"
        
    else
        colorized_echo red "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml –Ω–µ –ø—Ä–æ—à–ª–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
        if restore_backup "$backup_file" "$COMPOSE_FILE"; then
            colorized_echo green "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            colorized_echo red "Please check the docker-compose.yml file manually"
        else
            colorized_echo red "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é! –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            colorized_echo red "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $backup_file"
        fi
        exit 1
    fi
}


check_editor() {
    if [ -z "$EDITOR" ]; then
        if command -v nano >/dev/null 2>&1; then
            EDITOR="nano"
        elif command -v vi >/dev/null 2>&1; then
            EDITOR="vi"
        else
            detect_os
            install_package nano
            EDITOR="nano"
        fi
    fi
}

xray_log_out() {
        if ! is_remnanode_installed; then
            colorized_echo red "RemnaNode not installed!"
            exit 1
        fi
    detect_compose

        if ! is_remnanode_up; then
            colorized_echo red "RemnaNode is not running. Start it first with 'remnanode up'"
            exit 1
        fi

    docker exec -it $APP_NAME tail -n +1 -f /var/log/supervisor/xray.out.log
}

xray_log_err() {
        if ! is_remnanode_installed; then
            colorized_echo red "RemnaNode not installed!"
            exit 1
        fi
    
     detect_compose
 
        if ! is_remnanode_up; then
            colorized_echo red "RemnaNode is not running. Start it first with 'remnanode up'"
            exit 1
        fi

    docker exec -it $APP_NAME tail -n +1 -f /var/log/supervisor/xray.err.log
}

edit_command() {
    detect_os
    check_editor
    if [ -f "$COMPOSE_FILE" ]; then
        $EDITOR "$COMPOSE_FILE"
    else
        colorized_echo red "Compose file not found at $COMPOSE_FILE"
        exit 1
    fi
}


usage() {
    clear

    echo -e "\033[1;37m‚ö° $APP_NAME\033[0m \033[38;5;8m–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\033[0m \033[38;5;244mv$SCRIPT_VERSION\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 60))\033[0m"
    echo
    echo -e "\033[1;37müìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\033[0m"
    echo -e "   \033[38;5;15m$APP_NAME\033[0m \033[38;5;8m<–∫–æ–º–∞–Ω–¥–∞>\033[0m \033[38;5;244m[–æ–ø—Ü–∏–∏]\033[0m"
    echo

    echo -e "\033[1;37müöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\033[0m"
    printf "   \033[38;5;15m%-18s\033[0m %s\n" "install" "üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RemnaNode"
    printf "   \033[38;5;15m%-18s\033[0m %s\n" "update" "‚¨ÜÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
    printf "   \033[38;5;15m%-18s\033[0m %s\n" "uninstall" "üóëÔ∏è  –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å RemnaNode"
    echo

    echo -e "\033[1;37m‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:\033[0m"
    printf "   \033[38;5;250m%-18s\033[0m %s\n" "up" "‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    printf "   \033[38;5;250m%-18s\033[0m %s\n" "down" "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    printf "   \033[38;5;250m%-18s\033[0m %s\n" "restart" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    printf "   \033[38;5;250m%-18s\033[0m %s\n" "status" "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo

    echo -e "\033[1;37müìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏:\033[0m"
    printf "   \033[38;5;244m%-18s\033[0m %s\n" "logs" "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    printf "   \033[38;5;244m%-18s\033[0m %s\n" "xray-log-out" "üì§ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –ª–æ–≥–æ–≤ Xray"
    printf "   \033[38;5;244m%-18s\033[0m %s\n" "xray-log-err" "üì• –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫ Xray"
    printf "   \033[38;5;244m%-18s\033[0m %s\n" "setup-logs" "üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"
    echo

    echo -e "\033[1;37m‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\033[0m"
    printf "   \033[38;5;178m%-18s\033[0m %s\n" "update" "üîÑ –û–±–Ω–æ–≤–∏—Ç—å RemnaNode"
    printf "   \033[38;5;178m%-18s\033[0m %s\n" "core-update" "‚¨ÜÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å Xray-core"
    printf "   \033[38;5;178m%-18s\033[0m %s\n" "edit" "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo

    echo -e "\033[1;37müìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\033[0m"
    printf "   \033[38;5;117m%-18s\033[0m %s\n" "help" "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    printf "   \033[38;5;117m%-18s\033[0m %s\n" "version" "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"
    printf "   \033[38;5;117m%-18s\033[0m %s\n" "menu" "üéõÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
    echo

    if is_remnanode_installed && [ -f "$ENV_FILE" ]; then
        local node_port=$(grep "APP_PORT=" "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo "")
        if [ -n "$node_port" ]; then
            echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
            echo -e "\033[1;37müåê –î–æ—Å—Ç—É–ø –∫ RemnaNode:\033[0m \033[38;5;117m$NODE_IP:$node_port\033[0m"
        fi
    fi

    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
    echo -e "\033[1;37müìñ –ü—Ä–∏–º–µ—Ä—ã:\033[0m"
    echo -e "\033[38;5;244m   sudo $APP_NAME install\033[0m"
    echo -e "\033[38;5;244m   sudo $APP_NAME core-update\033[0m"
    echo -e "\033[38;5;244m   $APP_NAME logs\033[0m"
    echo -e "\033[38;5;244m   $APP_NAME menu           # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\033[0m"
    echo -e "\033[38;5;244m   $APP_NAME                # –¢–æ –∂–µ, —á—Ç–æ –∏ menu\033[0m"
    echo
    echo -e "\033[38;5;8m–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\033[38;5;15m$APP_NAME <–∫–æ–º–∞–Ω–¥–∞> --help\033[38;5;8m' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ\033[0m"
    echo
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
    echo -e "\033[38;5;8müìö –ü—Ä–æ–µ–∫—Ç: \033[38;5;250mhttps://gig.ovh\033[0m"
    echo -e "\033[38;5;8müêõ –ü—Ä–æ–±–ª–µ–º—ã: \033[38;5;250mhttps://github.com/Spakieone/Remna\033[0m"
    echo -e "\033[38;5;8müí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: \033[38;5;250mhttps://t.me/remnawave\033[0m"
    echo -e "\033[38;5;8müë®‚Äçüíª –ê–≤—Ç–æ—Ä: \033[38;5;250mDigneZzZ\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏
show_version() {
    echo -e "\033[1;37müöÄ CLI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RemnaNode\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
    echo -e "\033[38;5;250m–í–µ—Ä—Å–∏—è: \033[38;5;15m$SCRIPT_VERSION\033[0m"
    echo -e "\033[38;5;250m–ê–≤—Ç–æ—Ä:  \033[38;5;15mDigneZzZ\033[0m"
    echo -e "\033[38;5;250mGitHub:  \033[38;5;15mhttps://github.com/Spakieone/Remna\033[0m"
    echo -e "\033[38;5;250m–ü—Ä–æ–µ–∫—Ç: \033[38;5;15mhttps://gig.ovh\033[0m"
    echo -e "\033[38;5;250m–ü–æ–¥–¥–µ—Ä–∂–∫–∞: \033[38;5;15mhttps://t.me/remnawave\033[0m"
    echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 40))\033[0m"
}

main_menu() {
    while true; do
        clear
        echo -e "\033[1;37müöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RemnaNode $APP_NAME\033[0m \033[38;5;244mv$SCRIPT_VERSION\033[0m"
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
        echo
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–∞
        local menu_status="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        local status_color="\033[38;5;244m"
        local node_port=""
        local xray_version=""
        
        if is_remnanode_installed; then
            if [ -f "$ENV_FILE" ]; then
                node_port=$(grep "APP_PORT=" "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo "")
            fi
            
            if is_remnanode_up; then
                menu_status="–ó–∞–ø—É—â–µ–Ω"
                status_color="\033[1;32m"
                echo -e "${status_color}‚úÖ –°—Ç–∞—Ç—É—Å RemnaNode: –ó–ê–ü–£–©–ï–ù\033[0m"
                
                # –°—Ç–∞—Ç—É—Å Caddy
                echo
                local caddy_status=""
                local caddy_type=""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Caddy
                if docker ps --format "table {{.Names}}\t{{.Status}}" 2>/dev/null | grep -q "caddy"; then
                    local caddy_container=$(docker ps --format "table {{.Names}}\t{{.Status}}" 2>/dev/null | grep "caddy" | head -1 | awk '{print $1}')
                    if [ -n "$caddy_container" ]; then
                        if docker ps --format "{{.Status}}" --filter "name=$caddy_container" 2>/dev/null | grep -q "Up"; then
                            caddy_status="‚úÖ –ó–∞–ø—É—â–µ–Ω"
                            caddy_type="Docker ($caddy_container)"
                        else
                            caddy_status="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                            caddy_type="Docker ($caddy_container)"
                        fi
                    fi
                fi
                
                # –ï—Å–ª–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º systemd
                if [ -z "$caddy_status" ]; then
                    if systemctl list-unit-files 2>/dev/null | grep -q '^caddy\.service'; then
                        if systemctl is-active --quiet caddy 2>/dev/null; then
                            caddy_status="‚úÖ –ó–∞–ø—É—â–µ–Ω"
                            caddy_type="Systemd"
                        else
                            caddy_status="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                            caddy_type="Systemd"
                        fi
                    elif [ -f "/etc/systemd/system/caddy.service" ] || [ -f "/lib/systemd/system/caddy.service" ]; then
                        if systemctl is-active --quiet caddy 2>/dev/null; then
                            caddy_status="‚úÖ –ó–∞–ø—É—â–µ–Ω"
                            caddy_type="Systemd"
                        else
                            caddy_status="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                            caddy_type="Systemd"
                        fi
                    fi
                fi
                
                # –ï—Å–ª–∏ systemd –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
                if [ -z "$caddy_status" ]; then
                    if pgrep -f "caddy" >/dev/null 2>&1; then
                        local caddy_pid=$(pgrep -f "caddy" | head -1)
                        local caddy_cmd=$(ps -p "$caddy_pid" -o cmd= 2>/dev/null | head -1)
                        caddy_status="‚úÖ –ó–∞–ø—É—â–µ–Ω"
                        caddy_type="Process (PID: $caddy_pid)"
                    else
                        caddy_status="‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                        caddy_type=""
                    fi
                fi
                
                if [ -n "$caddy_type" ]; then
                    echo -e "\033[1;37müö¶ –°—Ç–∞—Ç—É—Å Caddy:\033[0m \033[1;32m$caddy_status\033[0m \033[38;5;244m($caddy_type)\033[0m"
                else
                    echo -e "\033[1;37müö¶ –°—Ç–∞—Ç—É—Å Caddy:\033[0m \033[1;31m$caddy_status\033[0m"
                fi
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if [ -n "$node_port" ]; then
                    echo
                    echo -e "\033[1;37müåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\033[0m"
                    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;117m%s\033[0m\n" "IP –∞–¥—Ä–µ—Å:" "$NODE_IP"
                    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;117m%s\033[0m\n" "–ü–æ—Ä—Ç:" "$node_port"
                    printf "   \033[38;5;15m%-12s\033[0m \033[38;5;117m%s:%s\033[0m\n" "–ü–æ–ª–Ω—ã–π URL:" "$NODE_IP" "$node_port"

                    # –°—Ç–∞—Ç—É—Å—ã iptables –∏ tBlocker –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                    local tb_exists=false tb_active=false ipt_label="" tb_label=""
                    if systemctl list-unit-files 2>/dev/null | grep -q '^tblocker\.service' || \
                       [ -f "/etc/systemd/system/tblocker.service" ] || [ -f "/lib/systemd/system/tblocker.service" ]; then
                        tb_exists=true
                        if systemctl is-active --quiet tblocker 2>/dev/null; then
                            tb_active=true
                        fi
                    fi
                    if $tb_exists; then
                        if $tb_active; then tb_label="\033[1;32m‚úÖ –ó–∞–ø—É—â–µ–Ω\033[0m"; else tb_label="\033[1;31m‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"; fi
                    else
                        tb_label="\033[38;5;244m‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"
                    fi
                    if command -v iptables >/dev/null 2>&1; then
                        if iptables -L -n >/dev/null 2>&1; then
                            ipt_label="\033[1;32m‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\033[0m"
                        else
                            ipt_label="\033[1;33m‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\033[0m"
                        fi
                    else
                        ipt_label="\033[38;5;244m‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω\033[0m"
                    fi
                    echo -e "\033[1;37müõ°Ô∏è  Firewall (iptables):\033[0m ${ipt_label}"
                    printf "       \033[38;5;15m%-10s\033[0m %b\n" "tBlocker:" "${tb_label}"
                    
                    # –°—Ç–∞—Ç—É—Å UFW
                    local ufw_status=""
                    if command -v ufw >/dev/null 2>&1; then
                        if ufw status | grep -q "Status: active"; then
                            ufw_status="\033[1;32m‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\033[0m"
                        else
                            ufw_status="\033[1;33m‚ö†Ô∏è  –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\033[0m"
                        fi
                    else
                        ufw_status="\033[38;5;244m‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"
                    fi
                    printf "       \033[38;5;15m%-10s\033[0m %b\n" "UFW:" "${ufw_status}"
                fi
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Xray-core
                xray_version=$(get_current_xray_core_version 2>/dev/null || echo "Not installed")
                echo
                echo -e "\033[1;37m‚öôÔ∏è  –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:\033[0m"
                printf "   \033[38;5;15m%-12s\033[0m " "Xray Core:"
                if [ "$xray_version" != "Not installed" ]; then
                    echo -e "\033[1;32m‚úÖ $xray_version\033[0m"
                else
                    echo -e "\033[1;33m‚ö†Ô∏è  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m"
                fi

                # (–ø–æ–¥—Ä–æ–±–Ω—ã–π –±–ª–æ–∫ tBlocker/iptables —É–¥–∞–ª—ë–Ω –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                echo
                echo -e "\033[1;37müíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:\033[0m"
                
                local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 2>/dev/null || echo "N/A")
                local mem_info=$(free -h | grep "Mem:" 2>/dev/null)
                local mem_used=$(echo "$mem_info" | awk '{print $3}' 2>/dev/null || echo "N/A")
                local mem_total=$(echo "$mem_info" | awk '{print $2}' 2>/dev/null || echo "N/A")
                
                printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s%%\033[0m\n" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:" "$cpu_usage"
                printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s / %s\033[0m\n" "–ü–∞–º—è—Ç—å:" "$mem_used" "$mem_total"
                
                local disk_usage=$(df -h "$APP_DIR" 2>/dev/null | tail -1 | awk '{print $5}' | sed 's/%//' 2>/dev/null || echo "N/A")
                local disk_available=$(df -h "$APP_DIR" 2>/dev/null | tail -1 | awk '{print $4}' 2>/dev/null || echo "N/A")
                
                printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s%% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, %s –¥–æ—Å—Ç—É–ø–Ω–æ\033[0m\n" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:" "$disk_usage" "$disk_available"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
                if [ -d "$DATA_DIR" ]; then
                    local log_files=$(find "$DATA_DIR" -name "*.log" 2>/dev/null | wc -l)
                    if [ "$log_files" -gt 0 ]; then
                        local total_log_size=$(du -sh "$DATA_DIR"/*.log 2>/dev/null | awk '{total+=$1} END {print total"K"}' | sed 's/KK/K/')
                        printf "   \033[38;5;15m%-12s\033[0m \033[38;5;250m%s —Ñ–∞–π–ª–æ–≤ (%s)\033[0m\n" "–§–∞–π–ª—ã –ª–æ–≥–æ–≤:" "$log_files" "$total_log_size"
                    fi
                fi
                
            else
                menu_status="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                status_color="\033[1;31m"
                echo -e "${status_color}‚ùå –°—Ç–∞—Ç—É—Å RemnaNode: –û–°–¢–ê–ù–û–í–õ–ï–ù\033[0m"
                echo -e "\033[38;5;244m   –°–µ—Ä–≤–∏—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã\033[0m"
                echo -e "\033[38;5;244m   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 2 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ RemnaNode\033[0m"
            fi
        else
            echo -e "${status_color}üì¶ –°—Ç–∞—Ç—É—Å RemnaNode: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù\033[0m"
            echo -e "\033[38;5;244m   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 1 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RemnaNode\033[0m"
        fi
        
        echo
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
        echo
        echo -e "\033[1;37müöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\033[0m"
        echo -e "   \033[38;5;15m1)\033[0m üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RemnaNode"
        echo -e "   \033[38;5;15m2)\033[0m ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã RemnaNode"
        echo -e "   \033[38;5;15m3)\033[0m ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã RemnaNode"
        echo -e "   \033[38;5;15m4)\033[0m üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã RemnaNode"
        echo -e "   \033[38;5;15m5)\033[0m üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å RemnaNode"
        echo
        echo -e "\033[1;37müìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏:\033[0m"
        echo -e "   \033[38;5;15m6)\033[0m üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å RemnaNode"
        echo -e "   \033[38;5;15m7)\033[0m üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo -e "   \033[38;5;15m8)\033[0m üì§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –ª–æ–≥–∏ Xray"
        echo -e "   \033[38;5;15m9)\033[0m üì• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ Xray"
        echo
        echo -e "\033[1;37m‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\033[0m"
        echo -e "   \033[38;5;15m10)\033[0m üîÑ –û–±–Ω–æ–≤–∏—Ç—å RemnaNode"
        echo -e "   \033[38;5;15m11)\033[0m ‚¨ÜÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å Xray-core"
        echo -e "   \033[38;5;15m12)\033[0m üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo -e "   \033[38;5;15m13)\033[0m üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤"

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ tBlocker —Å –¥—Ä—É–≥–∏–º —Ü–≤–µ—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
        echo -e "\033[38;5;8m$(printf '%.0s_' $(seq 1 54))\033[0m"
        echo -e "\033[1;36müõ°Ô∏è  tBlocker:\033[0m"
        echo -e "   \033[38;5;15m14)\033[0m üõ°Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å tBlocker"
        echo -e "   \033[38;5;15m15)\033[0m üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å tBlocker"
        echo
        
        echo -e "\033[38;5;8m$(printf '‚îÄ%.0s' $(seq 1 55))\033[0m"
        echo -e "\033[38;5;15m   0)\033[0m üö™ –í—ã—Ö–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"
        echo
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        case "$menu_status" in
            "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                echo -e "\033[1;34müí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –æ–ø—Ü–∏–∏ 1 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RemnaNode\033[0m"
                ;;
            "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                echo -e "\033[1;34müí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 2 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–∞\033[0m"
                ;;
            "–ó–∞–ø—É—â–µ–Ω")
                if [ "$xray_version" = "Not installed" ]; then
                    echo -e "\033[1;34müí° –°–æ–≤–µ—Ç: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xray-core —Å –æ–ø—Ü–∏–µ–π 11 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\033[0m"
                else
                    echo -e "\033[1;34müí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ (7-9) –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ (13)\033[0m"
                fi
                ;;
        esac
        
        echo -e "\033[38;5;8mRemnaNode CLI v$SCRIPT_VERSION by DigneZzZ ‚Ä¢ gig.ovh\033[0m"
        echo
        read -p "$(echo -e "\033[1;37m–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [0-15]:\033[0m ")" choice

        case "$choice" in
            1) install_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            2) up_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            3) down_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            4) restart_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            5) uninstall_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            6) status_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            7) logs_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            8) xray_log_out; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            9) xray_log_err; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            10) update_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            11) update_core_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            12) edit_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            13) setup_log_rotation; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            14) install_tblocker_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            15) uninstall_tblocker_command; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." ;;
            0) clear; exit 0 ;;
            *) 
                echo -e "\033[1;31m‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è!\033[0m"
                sleep 1
                ;;
        esac
    done
}

# –ì–ª–∞–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
case "${COMMAND:-menu}" in
    install) install_command ;;
    install-script) install_script_command ;;
    uninstall) uninstall_command ;;
    uninstall-script) uninstall_script_command ;;
    up) up_command ;;
    down) down_command ;;
    restart) restart_command ;;
    status) status_command ;;
    logs) logs_command ;;
    xray-log-out) xray_log_out ;;
    xray-log-err) xray_log_err ;;
    update) update_command ;;
    core-update) update_core_command ;;
    edit) edit_command ;;
    setup-logs) setup_log_rotation ;;
    install-tblocker) install_tblocker_command ;;
    help|--help|-h) usage ;;
    version|--version|-v) show_version ;;
    menu) main_menu ;;
    "") main_menu ;;
    *) 
        echo -e "\033[1;31m‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND\033[0m"
        echo -e "\033[38;5;244m–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\033[38;5;15m$APP_NAME help\033[38;5;244m' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\033[0m"
        exit 1
        ;;
esac

