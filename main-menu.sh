#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –≤–æ–ª–Ω–∞–º–∏
show_header() {
    clear
    echo -e "${BOLD}${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}                                                              ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}  ${WHITE}‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù${NC}               ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}                                                              ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}       ${GRAY}Management Suite by Spakieone${NC}                          ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïë${NC}                                                              ${BOLD}${CYAN}‚ïë${NC}"
    echo -e "${BOLD}${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_main_menu() {
    show_header
    
    # –ú–µ–Ω—é —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    echo -e "${BOLD}${WHITE}‚îå‚îÄ üõ†Ô∏è  –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}                                                      ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}1.${NC} ${YELLOW}üß© Remnawave Panel${NC}     ${GRAY}‚îÉ${NC} ${WHITE}–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}       ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}2.${NC} ${YELLOW}üñ•Ô∏è RemnaNode Core${NC}      ${GRAY}‚îÉ${NC} ${WHITE}–£–∑–ª—ã –∏ —Å–µ—Ä–≤–∏—Å—ã${NC}          ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}3.${NC} ${YELLOW}üõ°Ô∏è Reality Caddy${NC}       ${GRAY}‚îÉ${NC} ${WHITE}–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞${NC}      ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}4.${NC} ${YELLOW}üöÄ Network Tools${NC}       ${GRAY}‚îÉ${NC} ${WHITE}–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏${NC}        ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}5.${NC} ${YELLOW}üìà Node Exporter + API${NC} ${GRAY}‚îÉ${NC} ${WHITE}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ${NC} ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}6.${NC} ${YELLOW}üìä System Status${NC}       ${GRAY}‚îÉ${NC} ${WHITE}–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è${NC}    ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}7.${NC} ${YELLOW}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥—ã${NC}       ${GRAY}‚îÉ${NC} ${WHITE}UFW –∏ IPv6${NC}              ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}                                                      ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
    echo -e "${BOLD}${WHITE}‚îå‚îÄ üí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}8.${NC} ${YELLOW}üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}    ${GRAY}‚îÉ${NC} ${WHITE}–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}       ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
    echo -e "${BOLD}${WHITE}‚îå‚îÄüö™–í–´–•–û–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${BOLD}${WHITE}‚îÇ${NC}  ${BOLD}${GREEN}0.${NC} ${WHITE}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã${NC}                                ${BOLD}${WHITE}‚îÇ${NC}"
    echo -e "${BOLD}${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
    echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:${NC} "
    echo -n "   ‚û§ "
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
call_script() {
    local script_name=$1
    shift  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–∏–º—è —Å–∫—Ä–∏–ø—Ç–∞), –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    local script_path="./$script_name"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
    if [ -f "$script_path" ]; then
        echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ $script_name...${NC}"
        echo ""
        bash "$script_path" "$@"
        echo ""
        echo -e "${GREEN}–°–∫—Ä–∏–ø—Ç $script_name –∑–∞–≤–µ—Ä—à–µ–Ω.${NC}"
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    elif [ -f "script/scripts-main/$script_name" ]; then
        echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ $script_name...${NC}"
        echo ""
        bash "script/scripts-main/$script_name" "$@"
        echo ""
        echo -e "${GREEN}–°–∫—Ä–∏–ø—Ç $script_name –∑–∞–≤–µ—Ä—à–µ–Ω.${NC}"
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    else
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, —Å–∫–∞—á–∏–≤–∞–µ–º —Å GitHub
        echo -e "${YELLOW}–°–∫–∞—á–∏–≤–∞–µ–º $script_name —Å GitHub...${NC}"
        local github_url="https://raw.githubusercontent.com/Spakieone/Remna/main/$script_name"
        
        echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ $script_name...${NC}"
        echo ""
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        local temp_script="/tmp/$script_name"
        curl -s "$github_url" -o "$temp_script"
        chmod +x "$temp_script"
        bash "$temp_script" "$@"
        rm -f "$temp_script"
        echo ""
        echo -e "${GREEN}–°–∫—Ä–∏–ø—Ç $script_name –∑–∞–≤–µ—Ä—à–µ–Ω.${NC}"
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
show_system_status() {
    show_header
    echo -e "${BOLD}${WHITE}üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã${NC}"
    echo -e "${GRAY}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    echo -e "${WHITE}üê≥ Docker:${NC}"
    if systemctl is-active --quiet docker; then
        echo -e "   ${GREEN}‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω${NC}"
        local docker_version=$(docker --version 2>/dev/null | cut -d' ' -f3 | cut -d',' -f1 || echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        echo -e "   ${GRAY}üì¶ –í–µ—Ä—Å–∏—è: $docker_version${NC}"
    else
        echo -e "   ${RED}‚ùå –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    echo -e "${WHITE}üîß Docker Compose:${NC}"
    if command -v docker-compose &> /dev/null || command -v docker compose &> /dev/null; then
        echo -e "   ${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
    else
        echo -e "   ${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    echo ""
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    echo -e "${WHITE}üíæ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:${NC}"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    local disk_usage=$(df -h / | tail -1 | awk '{print $5}' | sed 's/%//')
    local disk_used=$(df -h / | tail -1 | awk '{print $3}')
    local disk_total=$(df -h / | tail -1 | awk '{print $2}')
    echo -e "   ${CYAN}üíø –î–∏—Å–∫:${NC} $disk_used / $disk_total (${disk_usage}%)"
    
    # –ü–∞–º—è—Ç—å
    local mem_info=$(free -h | grep Mem)
    local mem_used=$(echo $mem_info | awk '{print $3}')
    local mem_total=$(echo $mem_info | awk '{print $2}')
    local mem_percent=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    echo -e "   ${CYAN}üß† –ü–∞–º—è—Ç—å:${NC} $mem_used / $mem_total (${mem_percent}%)"
    
    # CPU
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
    echo -e "   ${CYAN}‚ö° CPU:${NC} ${cpu_usage}% –∑–∞–≥—Ä—É–∑–∫–∞"
    
    echo ""
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
    echo -e "${WHITE}üåê –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã Remna:${NC}"
    local ports=$(netstat -tlnp 2>/dev/null | grep -E ':(3000|3010|8080|9443|9050|9051|5002|9100)' | head -5)
    if [ -n "$ports" ]; then
        echo "$ports" | while read line; do
            local port=$(echo $line | awk '{print $4}' | cut -d':' -f2)
            local service=$(echo $line | awk '{print $7}' | cut -d'/' -f2)
            echo -e "   ${GREEN}üîå –ü–æ—Ä—Ç $port:${NC} $service"
        done
    else
        echo -e "   ${GRAY}üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ Remna${NC}"
    fi
    
    echo ""
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    echo -e "${WHITE}‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:${NC}"
    local uptime_info=$(uptime | sed 's/.*up //' | sed 's/,.*//')
    echo -e "   ${GRAY}üïê –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: $uptime_info${NC}"
    
    echo ""
    echo -e "${GRAY}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
}

# ===============================================================================
# NODE MONITORING SETUP - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é
# ===============================================================================

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è Node Monitoring
readonly CYAN_BOLD='\033[1;36m'
readonly PURPLE_BOLD='\033[1;35m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Node Monitoring
log_success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[‚ö†]${NC} $1"; }
log_error() { echo -e "${RED}[‚úó]${NC} $1"; }
log_info() { echo -e "${BLUE}[‚Ñπ]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    local service_name="$1"
    if systemctl is-active --quiet "$service_name" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
wait_for_user() {
    echo
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
find_script() {
    local script_name="$1"
    
    log_info "üîç –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç: $script_name"
    log_info "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
    if [[ -f "script/scripts-main/$script_name" ]]; then
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω –≤: script/scripts-main/$script_name"
        echo "script/scripts-main/$script_name"
    elif [[ -f "./$script_name" ]]; then
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω –≤: ./$script_name"
        echo "./$script_name"
    elif [[ -f "$script_name" ]]; then
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω –≤: $script_name"
        echo "$script_name"
    else
        log_error "‚ùå –°–∫—Ä–∏–ø—Ç $script_name –Ω–µ –Ω–∞–π–¥–µ–Ω –≤:"
        log_error "   - script/scripts-main/$script_name"
        log_error "   - ./$script_name"
        log_error "   - $script_name"
        log_info "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la 2>/dev/null || dir 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
check_script_exists() {
    local script_path="$1"
    local script_name="$2"
    
    if [[ ! -f "$script_path" ]]; then
        log_error "$script_name –Ω–µ –Ω–∞–π–¥–µ–Ω: $script_path"
        return 1
    fi
    
    if [[ ! -x "$script_path" ]]; then
        log_warn "$script_name –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π, –¥–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º..."
        chmod +x "$script_path"
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
install_full_monitoring() {
    show_header
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    echo -e "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: Node API + MTR + Node Exporter${NC}"
    echo
    
    # –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local node_api_script
    local node_exporter_script
    
    log_info "üîç –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ install_node_api.sh..."
    if find_script "install_node_api.sh" >/dev/null 2>&1; then
        node_api_script=$(find_script "install_node_api.sh")
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω Node API —Å–∫—Ä–∏–ø—Ç: $node_api_script"
    else
        log_error "‚ùå –°–∫—Ä–∏–ø—Ç install_node_api.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        find_script "install_node_api.sh" || true  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        wait_for_user
        return 1
    fi
    
    log_info "üîç –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ install_node_exporter.sh..."
    if find_script "install_node_exporter.sh" >/dev/null 2>&1; then
        node_exporter_script=$(find_script "install_node_exporter.sh")
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω Node Exporter —Å–∫—Ä–∏–ø—Ç: $node_exporter_script"
    else
        log_error "‚ùå –°–∫—Ä–∏–ø—Ç install_node_exporter.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        find_script "install_node_exporter.sh" || true  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        wait_for_user
        return 1
    fi
    
    if ! check_script_exists "$node_api_script" "Node API —Å–∫—Ä–∏–ø—Ç"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node API"
        wait_for_user
        return 1
    fi
    
    if ! check_script_exists "$node_exporter_script" "Node Exporter —Å–∫—Ä–∏–ø—Ç"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node Exporter"
        wait_for_user
        return 1
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node API + MTR
    log_info "–≠—Ç–∞–ø 1/2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node API + MTR"
    if INSTALL_MTR=true bash "$node_api_script"; then
        log_success "Node API + MTR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node API + MTR"
        wait_for_user
        return 1
    fi
    
    echo
    log_info "–≠—Ç–∞–ø 2/2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node Exporter"
    if bash "$node_exporter_script"; then
        log_success "Node Exporter —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node Exporter"
        wait_for_user
        return 1
    fi
    
    echo
    log_success "‚úÖ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    wait_for_user
}

install_node_api_only() {
    show_header
    log_info "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node API + MTR..."
    echo
    
    # –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local node_api_script
    log_info "üîç –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ install_node_api.sh..."
    if find_script "install_node_api.sh" >/dev/null 2>&1; then
        node_api_script=$(find_script "install_node_api.sh")
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω Node API —Å–∫—Ä–∏–ø—Ç: $node_api_script"
    else
        log_error "‚ùå –°–∫—Ä–∏–ø—Ç install_node_api.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        find_script "install_node_api.sh" || true  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        wait_for_user
        return 1
    fi
    
    if ! check_script_exists "$node_api_script" "Node API —Å–∫—Ä–∏–ø—Ç"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node API"
        wait_for_user
        return 1
    fi
    
    if INSTALL_MTR=true bash "$node_api_script"; then
        log_success "‚úÖ Node API + MTR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node API + MTR"
        wait_for_user
        return 1
    fi
    
    wait_for_user
}

install_node_exporter_only() {
    show_header
    log_info "üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node Exporter..."
    echo
    
    # –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local node_exporter_script
    log_info "üîç –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ install_node_exporter.sh..."
    if find_script "install_node_exporter.sh" >/dev/null 2>&1; then
        node_exporter_script=$(find_script "install_node_exporter.sh")
        log_info "‚úÖ –ù–∞–π–¥–µ–Ω Node Exporter —Å–∫—Ä–∏–ø—Ç: $node_exporter_script"
    else
        log_error "‚ùå –°–∫—Ä–∏–ø—Ç install_node_exporter.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        find_script "install_node_exporter.sh" || true  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        wait_for_user
        return 1
    fi
    
    if ! check_script_exists "$node_exporter_script" "Node Exporter —Å–∫—Ä–∏–ø—Ç"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node Exporter"
        wait_for_user
        return 1
    fi
    
    if bash "$node_exporter_script"; then
        log_success "‚úÖ Node Exporter —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node Exporter"
        wait_for_user
        return 1
    fi
    
    wait_for_user
}

# –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_node_api() {
    show_header
    log_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Node API..."
    echo
    
    if ! check_service_status "node-api"; then
        log_error "Node API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: sudo systemctl start node-api"
        wait_for_user
        return 1
    fi
    
    log_success "Node API —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint..."
    if timeout 5 curl -s http://localhost:8080/health >/dev/null 2>&1; then
        log_success "Health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        echo -e "${CYAN}–û—Ç–≤–µ—Ç health endpoint:${NC}"
        curl -s http://localhost:8080/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost:8080/health
    else
        log_warn "Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    echo
    log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:"
    systemctl status node-api --no-pager -l | head -20
    
    wait_for_user
}

test_mtr() {
    show_header
    log_info "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MTR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
    echo
    
    if ! command -v mtr >/dev/null 2>&1; then
        log_error "MTR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MTR: sudo apt install mtr-tiny"
        wait_for_user
        return 1
    fi
    
    log_success "MTR –Ω–∞–π–¥–µ–Ω"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    log_info "–í–µ—Ä—Å–∏—è MTR:"
    mtr --version 2>/dev/null || echo "–í–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    echo
    log_info "–ó–∞–ø—É—Å–∫ MTR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–æ 8.8.8.8 (5 —Ü–∏–∫–ª–æ–≤)..."
    echo
    
    if mtr --report --report-cycles 5 8.8.8.8; then
        log_success "MTR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MTR"
    fi
    
    wait_for_user
}

test_node_exporter() {
    show_header
    log_info "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Node Exporter..."
    echo
    
    if ! check_service_status "node_exporter"; then
        log_error "Node Exporter –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: sudo systemctl start node_exporter"
        wait_for_user
        return 1
    fi
    
    log_success "Node Exporter —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ endpoint
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –º–µ—Ç—Ä–∏–∫..."
    if timeout 5 curl -s http://localhost:9100/metrics >/dev/null 2>&1; then
        log_success "Endpoint –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç—Ä–∏–∫
        local metrics_count
        metrics_count=$(curl -s http://localhost:9100/metrics | wc -l)
        log_info "–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Ç—Ä–∏–∫: $metrics_count"
        
        echo
        log_info "–ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç—Ä–∏–∫:"
        curl -s http://localhost:9100/metrics | grep -E "^(node_cpu|node_memory|node_filesystem)" | head -5
    else
        log_warn "Endpoint –º–µ—Ç—Ä–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    echo
    log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:"
    systemctl status node_exporter --no-pager -l | head -20
    
    wait_for_user
}

show_monitoring_logs() {
    show_header
    log_info "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
    echo
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    echo "1. Node API"
    echo "2. Node Exporter"
    echo "3. –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏)"
    echo "4. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    echo "0. –ù–∞–∑–∞–¥"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ [0-4]: " log_choice
    
    case $log_choice in
        1)
            if check_service_status "node-api"; then
                echo -e "${CYAN}üìã –õ–æ–≥–∏ Node API (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):${NC}"
                journalctl -u node-api -n 50 --no-pager
            else
                log_warn "Node API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            fi
            ;;
        2)
            if check_service_status "node_exporter"; then
                echo -e "${CYAN}üìã –õ–æ–≥–∏ Node Exporter (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):${NC}"
                journalctl -u node_exporter -n 50 --no-pager
            else
                log_warn "Node Exporter –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            fi
            ;;
        3)
            echo -e "${CYAN}üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç):${NC}"
            journalctl --since "30 minutes ago" --priority=err --no-pager
            ;;
        4)
            echo -e "${CYAN}üìã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:${NC}"
            for service in node-api node_exporter; do
                if systemctl is-enabled "$service" >/dev/null 2>&1; then
                    echo -e "\n${YELLOW}=== $service ===${NC}"
                    journalctl -u "$service" -n 10 --no-pager
                fi
            done
            ;;
        0)
            return
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
    
    wait_for_user
}

# –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
remove_node_api() {
    show_header
    log_info "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ Node API..."
    echo
    
    log_warn "–≠—Ç–æ —É–¥–∞–ª–∏—Ç Node API, –≤—Å–µ –µ–≥–æ —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm
    if [[ "$confirm" != [yY] ]]; then
        log_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
        wait_for_user
        return
    fi
    
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞..."
    systemctl stop node-api 2>/dev/null || true
    systemctl disable node-api 2>/dev/null || true
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    rm -f /etc/systemd/system/node-api.service
    rm -rf /opt/node-api
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    userdel node-api 2>/dev/null || true
    
    systemctl daemon-reload
    
    log_success "‚úÖ Node API —É–¥–∞–ª–µ–Ω"
    wait_for_user
}

remove_node_exporter() {
    show_header
    log_info "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ Node Exporter..."
    echo
    
    log_warn "–≠—Ç–æ —É–¥–∞–ª–∏—Ç Node Exporter, –≤—Å–µ –µ–≥–æ —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm
    if [[ "$confirm" != [yY] ]]; then
        log_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
        wait_for_user
        return
    fi
    
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞..."
    systemctl stop node_exporter 2>/dev/null || true
    systemctl disable node_exporter 2>/dev/null || true
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    rm -f /etc/systemd/system/node_exporter.service
    rm -f /usr/local/bin/node_exporter
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    userdel node_exporter 2>/dev/null || true
    
    systemctl daemon-reload
    
    log_success "‚úÖ Node Exporter —É–¥–∞–ª–µ–Ω"
    wait_for_user
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Node Monitoring
show_node_exporter_menu() {
    while true; do
        show_header
        echo -e "${CYAN_BOLD}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${CYAN_BOLD}‚îÇ${NC}                    ${PURPLE_BOLD}NODE MONITORING SETUP${NC}                        ${CYAN_BOLD}‚îÇ${NC}"
        echo -e "${CYAN_BOLD}‚îÇ${NC}                   ${BLUE}Management by Spakieone${NC}                       ${CYAN_BOLD}‚îÇ${NC}"
        echo -e "${CYAN_BOLD}‚îÇ${NC}                     ${YELLOW}Optimized v1.2.0${NC}                          ${CYAN_BOLD}‚îÇ${NC}"
        echo -e "${CYAN_BOLD}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo
        
        echo -e "${GREEN}‚îå‚îÄ üöÄ –£–°–¢–ê–ù–û–í–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${GREEN}‚îÇ${NC} 1. üöÄ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)  ${CYAN}‚îÇ${NC} Node API + Exporter   ${GREEN}‚îÇ${NC}"
        echo -e "${GREEN}‚îÇ${NC} 2. üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ Node API        ${CYAN}‚îÇ${NC} API + –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞     ${GREEN}‚îÇ${NC}"
        echo -e "${GREEN}‚îÇ${NC} 3. üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ Node Exporter   ${CYAN}‚îÇ${NC} –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã       ${GREEN}‚îÇ${NC}"
        echo -e "${GREEN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo
        
        echo -e "${YELLOW}‚îå‚îÄ üîß –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${YELLOW}‚îÇ${NC} 4. üß™ –¢–µ—Å—Ç Node API                     ${CYAN}‚îÇ${NC} –ü—Ä–æ–≤–µ—Ä–∫–∞ API          ${YELLOW}‚îÇ${NC}"
        echo -e "${YELLOW}‚îÇ${NC} 5. üåê –¢–µ—Å—Ç MTR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏              ${CYAN}‚îÇ${NC} –¢–µ—Å—Ç —Å–µ—Ç–∏             ${YELLOW}‚îÇ${NC}"
        echo -e "${YELLOW}‚îÇ${NC} 6. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Node Exporter   ${CYAN}‚îÇ${NC} –°—Ç–∞—Ç—É—Å –º–µ—Ç—Ä–∏–∫         ${YELLOW}‚îÇ${NC}"
        echo -e "${YELLOW}‚îÇ${NC} 7. üîç –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏                     ${CYAN}‚îÇ${NC} –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏        ${YELLOW}‚îÇ${NC}"
        echo -e "${YELLOW}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo
        
        echo -e "${RED}‚îå‚îÄ üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${RED}‚îÇ${NC} 8. ‚ùå –£–¥–∞–ª–∏—Ç—å Node API                  ${CYAN}‚îÇ${NC} –¢–æ–ª—å–∫–æ API            ${RED}‚îÇ${NC}"
        echo -e "${RED}‚îÇ${NC} 9. ‚ùå –£–¥–∞–ª–∏—Ç—å Node Exporter             ${CYAN}‚îÇ${NC} –¢–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏        ${RED}‚îÇ${NC}"
        echo -e "${RED}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo
        
        echo -e "${BLUE}‚îå‚îÄ üö™ –í–´–•–û–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${BLUE}‚îÇ${NC} 0. üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é              ${CYAN}‚îÇ${NC} –í–æ–∑–≤—Ä–∞—Ç               ${BLUE}‚îÇ${NC}"
        echo -e "${BLUE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        echo
        
        echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç [1-9, 0-–≤—ã—Ö–æ–¥]: ${NC}"
        echo -n "   ‚û§ "
        
        read -r choice
        
        case $choice in
            1)
                install_full_monitoring
                ;;
            2)
                install_node_api_only
                ;;
            3)
                install_node_exporter_only
                ;;
            4)
                test_node_api
                ;;
            5)
                test_mtr
                ;;
            6)
                test_node_exporter
                ;;
            7)
                show_monitoring_logs
                ;;
            8)
                remove_node_api
                ;;
            9)
                remove_node_exporter
                ;;
            0)
                return
                ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                sleep 2
                ;;
        esac
    done
}


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while true; do
    show_main_menu
    read -r choice
    
    case $choice in
        1) 
            echo -e "${CYAN}üß© –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Remnawave...${NC}"
            call_script "remnawave.sh" 
            ;;
        2) 
            echo -e "${YELLOW}üñ•Ô∏è  –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RemnaNode...${NC}"
            call_script "remnanode.sh" 
            ;;
        3) 
            echo -e "${PURPLE}üõ°Ô∏è  –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Reality Caddy...${NC}"
            call_script "selfsteal.sh" 
            ;;
        4) 
            echo -e "${BLUE}üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...${NC}"
            call_script "wtm.sh" 
            ;;
        5) 
            echo -e "${GREEN}üìà –ó–∞–ø—É—Å–∫ Node Exporter + Node API...${NC}"
            show_node_exporter_menu
            ;;
        6) 
            echo -e "${CYAN}üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...${NC}"
            show_system_status 
            ;;
        7) 
            echo -e "${PURPLE}‚öôÔ∏è  –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã...${NC}"
            call_script "node-config.sh" 
            ;;
        8) 
            echo -e "${YELLOW}üí° –ó–∞–ø—É—Å–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...${NC}"
            call_script "useful_commands.sh" 
            ;;
        0) 
            echo ""
            echo -e "${BOLD}${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Remna Management Suite!${NC}"
            echo -e "${GRAY}   –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üöÄ${NC}"
            echo ""
            exit 0
            ;;
        *) 
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç 0 –¥–æ 8.${NC}"
            sleep 2
            ;;
    esac
done
